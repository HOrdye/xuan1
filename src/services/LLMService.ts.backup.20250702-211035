import type { Hexagram } from '../features/dilemma/types';
import type { StoryTarotCard } from '../features/tarot/utils/storyTarotData';
import type { TarotSpread } from '../features/tarot/utils/tarotInterpretation';
import { EnvConfigManager } from '../utils/envConfig';

/**
 * 塔罗牌结构化解读结果接口
 */
export interface StructuredTarotInterpretation {
  overallInterpretation: {
    title: string;
    content: string;
  };
  cardInterpretations: Array<{
    position: string;
    cardName: string;
    interpretation: string;
  }>;
  guidance: {
    title: string;
    content: string;
  };
  summary: {
    title: string;
    content: string;
  };
}

/**
 * LLM配置接口
 */
export interface LLMConfig {
  provider: 'openai' | 'claude' | 'deepseek' | 'qianwen' | 'custom';
  apiKey: string;
  baseURL?: string;
  model?: string;
  temperature?: number;
  maxTokens?: number;
}

/**
 * LLM响应接口
 */
export interface LLMResponse {
  content: string;
  usage?: {
    promptTokens: number;
    completionTokens: number;
    totalTokens: number;
  };
}

/**
 * 加载状态接口
 */
export interface LLMLoadingState {
  isLoading: boolean;
  progress: string;
  stage: 'preparing' | 'calling' | 'processing' | 'completed' | 'error';
}

/**
 * 默认配置
 */
const DEFAULT_CONFIG: LLMConfig = {
  provider: 'deepseek',
  apiKey: EnvConfigManager.getEnvVar('VITE_LLM_API_KEY', ''),
  baseURL: EnvConfigManager.getEnvVar('VITE_LLM_BASE_URL', ''),
  model: 'deepseek-chat',
  temperature: 0.7,
  maxTokens: 4000
};

console.log('🔧 LLM Service 初始化配置:', {
  provider: DEFAULT_CONFIG.provider,
  hasApiKey: !!DEFAULT_CONFIG.apiKey,
  baseURL: DEFAULT_CONFIG.baseURL || '使用默认',
  model: DEFAULT_CONFIG.model
});

/**
 * LLM服务类 - 支持多个主流LLM提供商
 */
export class LLMService {
  private static config: LLMConfig = DEFAULT_CONFIG;
  private static loadingCallbacks: ((state: LLMLoadingState) => void)[] = [];
  
  /**
   * 设置LLM配置
   */
  static setConfig(config: Partial<LLMConfig>) {
    this.config = { ...this.config, ...config };
    console.log('🔧 LLM配置已更新:', {
      provider: this.config.provider,
      hasApiKey: !!this.config.apiKey,
      model: this.config.model
    });
  }
  
  /**
   * 获取当前配置
   */
  static getConfig(): LLMConfig {
    return { ...this.config };
  }
  
  /**
   * 注册加载状态回调
   */
  static onLoadingStateChange(callback: (state: LLMLoadingState) => void) {
    this.loadingCallbacks.push(callback);
  }
  
  /**
   * 移除加载状态回调
   */
  static offLoadingStateChange(callback: (state: LLMLoadingState) => void) {
    const index = this.loadingCallbacks.indexOf(callback);
    if (index > -1) {
      this.loadingCallbacks.splice(index, 1);
    }
  }
  
  /**
   * 更新加载状态
   */
  private static updateLoadingState(state: LLMLoadingState) {
    this.loadingCallbacks.forEach(callback => callback(state));
  }

  /**
   * 获取塔罗牌解读
   */
  static async getTarotInterpretation(
    cards: StoryTarotCard[],
    spread: TarotSpread,
    question: string = ''
  ): Promise<StructuredTarotInterpretation> {
    this.updateLoadingState({
      isLoading: true,
      progress: '正在准备塔罗牌解读...',
      stage: 'preparing'
    });

    try {
      console.log('🃏 开始塔罗牌解读...', {
        cardCount: cards.length,
        spread: spread.name,
        hasQuestion: !!question,
        provider: this.config.provider,
        hasApiKey: !!this.config.apiKey
      });

      this.updateLoadingState({
        isLoading: true,
        progress: '正在生成结构化解读...',
        stage: 'preparing'
      });

      // 统一使用本地差异化解读逻辑生成基础结构
      const baseInterpretation = this.getLocalTarotInterpretation(cards, spread, question);

      // 如果配置了API密钥，尝试用AI优化内容质量
      if (this.config.apiKey) {
        this.updateLoadingState({
          isLoading: true,
          progress: '正在使用AI优化解读内容...',
          stage: 'calling'
        });

        try {
          // 使用AI优化每个部分的内容质量，但保持结构差异
          const optimizedInterpretation = await this.optimizeInterpretationWithAI(baseInterpretation, cards, spread, question);
          
          this.updateLoadingState({
            isLoading: false,
            progress: 'AI增强解读完成',
            stage: 'completed'
          });

          return optimizedInterpretation;
        } catch (aiError) {
          console.warn('⚠️ AI优化失败，使用基础解读:', aiError);
          
          this.updateLoadingState({
            isLoading: false,
            progress: '解读完成（AI优化失败，使用基础解读）',
            stage: 'completed'
          });

          return baseInterpretation;
        }
      } else {
        console.log('🏠 使用纯本地塔罗解读');
        
        this.updateLoadingState({
          isLoading: false,
          progress: '传统塔罗解读完成',
          stage: 'completed'
        });

        return baseInterpretation;
      }
    } catch (error) {
      console.error('❌ 塔罗解读失败:', error);
      
      this.updateLoadingState({
        isLoading: false,
        progress: '解读失败，请重试',
        stage: 'error'
      });

      // 即使出错也返回基础解读
      return this.getLocalTarotInterpretation(cards, spread, question);
    }
  }

  /**
   * 使用AI优化解读内容质量，但保持本地生成的差异化结构
   */
  private static async optimizeInterpretationWithAI(
    baseInterpretation: StructuredTarotInterpretation,
    cards: StoryTarotCard[],
    spread: TarotSpread,
    question: string
  ): Promise<StructuredTarotInterpretation> {
    // 构建优化提示词，明确要求保持差异化
    const optimizationPrompt = this.buildOptimizationPrompt(baseInterpretation, cards, spread, question);
    
    this.updateLoadingState({
      isLoading: true,
      progress: '正在AI增强解读深度...',
      stage: 'processing'
    });

    const response = await this.callLLMAPI(optimizationPrompt);
    
    if (response.content) {
      try {
        const optimizedContent = JSON.parse(response.content);
        
        // 确保结构完整性，如果AI返回不完整则使用原始内容
        return {
          overallInterpretation: {
            title: baseInterpretation.overallInterpretation.title,
            content: optimizedContent.overallInterpretation?.content || baseInterpretation.overallInterpretation.content
          },
          cardInterpretations: baseInterpretation.cardInterpretations.map((card, index) => ({
            ...card,
            interpretation: optimizedContent.cardInterpretations?.[index]?.interpretation || card.interpretation
          })),
          guidance: {
            title: baseInterpretation.guidance.title,
            content: optimizedContent.guidance?.content || baseInterpretation.guidance.content
          },
          summary: {
            title: baseInterpretation.summary.title,
            content: optimizedContent.summary?.content || baseInterpretation.summary.content
          }
        };
      } catch (parseError) {
        console.warn('⚠️ AI返回内容解析失败，使用基础解读:', parseError);
        return baseInterpretation;
      }
    }
    
    return baseInterpretation;
  }

  /**
   * 构建AI优化提示词
   */
  private static buildOptimizationPrompt(
    baseInterpretation: StructuredTarotInterpretation,
    cards: StoryTarotCard[],
    spread: TarotSpread,
    question: string
  ): string {
    const cardsInfo = cards.map((card, index) => {
      const position = spread.positions[index];
      return `位置${index + 1}(${position.chineseName}): ${card.chineseName || card.name} - ${card.storyInterpretation}`;
    }).join('\n');

    return `你是一位拥有30年经验的国际知名塔罗大师。请优化以下塔罗解读内容的质量和深度，但必须严格保持四个部分的差异化特征。

**咨询者的问题**: ${question || '寻求人生指导与智慧启示'}
**选用牌阵**: ${spread.name} - ${spread.description}
**显现的牌面**: ${cardsInfo}

**当前解读内容**:
整体解读: ${baseInterpretation.overallInterpretation.content}
指导建议: ${baseInterpretation.guidance.content}  
核心启示: ${baseInterpretation.summary.content}

**优化要求**:
1. 四个部分必须保持完全不同的内容焦点，严禁重复
2. 整体解读专注能量场分析，不能涉及具体行动或哲理
3. 指导建议专注具体可执行的行动方案，不能涉及抽象概念
4. 核心启示专注人生哲学和深层感悟，不能涉及具体行动
5. 提升语言的专业性和感染力，保持结构化markdown格式
6. 每个部分长度控制在300-500字

请以JSON格式返回优化后的内容：
{
  "overallInterpretation": {
    "content": "优化后的整体能量解读，专注能量场分析..."
  },
  "cardInterpretations": [
    {
      "interpretation": "优化后的单牌解读..."
    }
  ],
  "guidance": {
    "content": "优化后的具体行动指南，分阶段执行方案..."
  },
  "summary": {
    "content": "优化后的人生智慧启示，深层哲理感悟..."
  }
}`;
  }

  private static getLocalTarotInterpretation(
    cards: StoryTarotCard[],
    spread: TarotSpread,
    question: string
  ): StructuredTarotInterpretation {
    console.log('🏠 使用本地塔罗解读');

    // 生成高质量的卡牌解读
    const cardInterpretations = cards.map((card, index) => {
      const position = spread.positions[index];
      const positionMeaning = this.getPositionMeaning(position, spread.name);
      const cardAdvice = this.generateCardAdvice(card);
      const storyContext = this.getStoryContext(card, position, question);
      
      return {
        position: position.chineseName || position.name,
        cardName: card.chineseName || card.name,
        interpretation: `在"${position.chineseName || position.name}"的位置上，${card.chineseName || card.name}为您带来重要的启示。${storyContext} 这张牌的核心能量提醒您：${cardAdvice}。结合您的问题"${question}"，这暗示着${positionMeaning}。`
      };
    });

    // 生成深度整体解读
    const overallInterpretation = this.generateDeepOverallInterpretation(cards, spread, question);
    
    // 生成实用指导建议
    const guidance = this.generatePracticalGuidance(cards, spread, question);

    // 生成洞察性总结
    const summary = this.generateInsightfulSummary(cards, spread, question);

    return {
      overallInterpretation,
      cardInterpretations,
      guidance,
      summary
    };
  }

  private static generateCardAdvice(card: StoryTarotCard): string {
    const adviceMap: {[key: string]: string} = {
      'The Fool': '保持初心，勇敢踏出第一步',
      'The Magician': '发挥个人才能，主动创造机会',
      'The High Priestess': '倾听内心的声音，相信直觉',
      'The Empress': '展现母性的关怀，滋养身边的人',
      'The Emperor': '承担责任，以稳重的态度面对挑战',
      'The Hierophant': '寻求智慧的指导，遵循传统价值',
      'The Lovers': '做出重要的选择，诚实面对内心',
      'The Chariot': '集中意志力，勇敢向前进',
      'Strength': '用内在的力量克服困难',
      'The Hermit': '内省反思，寻找内在的答案',
      'Wheel of Fortune': '接受变化，适应新的环境',
      'Justice': '公正公平，承担行为的后果',
      'The Hanged Man': '换个角度思考，学会放下',
      'Death': '接受结束，为新的开始做准备',
      'Temperance': '保持平衡，以中庸之道行事',
      'The Devil': '认清诱惑，获得内在的自由',
      'The Tower': '突破旧有的框架，重建新的基础',
      'The Star': '保持希望，相信美好的未来',
      'The Moon': '面对内心的恐惧，探索潜意识',
      'The Sun': '保持乐观积极，散发正能量',
      'Judgement': '反思过去，为重生做准备',
      'The World': '完成重要的阶段，庆祝成就'
    };

    return adviceMap[card.name] || '跟随心中的指引，做真实的自己';
  }

  /**
   * 获取位置含义
   */
  private static getPositionMeaning(position: any, spreadName: string): string {
    const positionMeanings: {[key: string]: {[key: string]: string}} = {
      'Three Card Spread': {
        '过去': '过去的经历为现状奠定了基础',
        '现在': '当前的状况需要您的关注和行动',
        '未来': '未来的发展取决于现在的选择'
      },
      'Love Pyramid Spread': {
        '你的感受': '您内心真实的情感状态',
        '对方感受': '对方可能的想法和感受',
        '关系基础': '这段关系的核心根基',
        '发展趋势': '关系未来的发展方向'
      },
      'Decision Making Spread': {
        '现状': '当前处境的真实状况',
        '选择A': '第一个选择的利弊分析',
        '选择B': '第二个选择的潜在影响',
        '隐藏因素': '您可能忽略的重要因素',
        '最佳路径': '最明智的行动方案'
      }
    };

    return positionMeanings[spreadName]?.[position.chineseName || position.name] || 
           '这个位置为您提供重要的人生指引';
  }

  /**
   * 获取故事背景
   */
  private static getStoryContext(card: StoryTarotCard, _position: any, _question: string): string {
    const storyTemplates = [
      `${card.storyInterpretation}，这与您当前的处境形成了有意义的呼应`,
      `卡牌的故事告诉我们${card.storyInterpretation}，为您的问题提供了新的视角`,
      `在这个充满象征意义的画面中，${card.storyInterpretation}，这正是您现在需要理解的`,
      `${card.storyInterpretation}，这个深刻的寓意与您的人生轨迹相互映照`
    ];

    return storyTemplates[Math.floor(Math.random() * storyTemplates.length)];
  }

  /**
   * 生成深度整体解读 - 专注能量分析和牌面组合
   */
  private static generateDeepOverallInterpretation(
    cards: StoryTarotCard[], 
    spread: TarotSpread, 
    question: string
  ): { title: string; content: string } {
    const cardCount = cards.length;
    const majorCount = cards.filter(card => card.category === 'major').length;
    const minorCount = cards.filter(card => card.category === 'minor').length;
    
    // 专注于能量分析的开场
    let reading = `## 🔮 能量场分析\n\n`;
    reading += `通过${spread.name}的神圣几何，我们观察到${cardCount}张牌构成的能量矩阵。`;
    
    // 牌面能量组合分析
    reading += `\n\n### ⚡ 能量构成特征\n\n`;
    if (majorCount > minorCount) {
      reading += `**大阿尔卡纳主导能量** (${majorCount}/${cardCount})\n`;
      reading += `宇宙级别的转化力量正在影响这个情况。这表明您正处在命运的重要节点上，灵魂层面的重大课题正在展开。每一个决定都可能触发深远的生命转变。`;
    } else if (minorCount > majorCount) {
      reading += `**小阿尔卡纳主导能量** (${minorCount}/${cardCount})\n`;
      reading += `日常生活的实际能量占据主导地位。解决方案就在您的具体行动中，通过调整生活模式和行为习惯，您能够有效地改善当前状况。`;
    } else {
      reading += `**大小阿尔卡纳平衡能量** (${majorCount}:${minorCount})\n`;
      reading += `精神觉醒与物质实践的完美结合。这种平衡预示着您需要在内在成长和外在行动之间找到和谐的节奏。`;
    }

    // 元素能量分析
    const elements = cards.map(card => card.element || 'earth');
    const elementCount = elements.reduce((acc, element) => {
      acc[element] = (acc[element] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    const dominantElements = Object.entries(elementCount)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 2);
    
    if (dominantElements.length > 0) {
      reading += `\n\n### 🌟 元素能量流动\n\n`;
      const [primaryElement, primaryCount] = dominantElements[0];
      const elementMeanings = {
        fire: '🔥 **火元素能量** - 激情、创造力、行动力的驱动',
        water: '💧 **水元素能量** - 情感、直觉、内在智慧的流动', 
        air: '💨 **风元素能量** - 思考、沟通、理性分析的力量',
        earth: '🌍 **土元素能量** - 稳定、实际、物质建设的根基'
      };
      
      reading += `${elementMeanings[primaryElement as keyof typeof elementMeanings] || '神秘能量'} 正在主导这个能量场 (${primaryCount}/${cardCount})。`;
      
      if (dominantElements[1]) {
        const [secondaryElement, secondaryCount] = dominantElements[1];
        reading += ` 同时，${elementMeanings[secondaryElement as keyof typeof elementMeanings] || '辅助能量'} 提供支持 (${secondaryCount}/${cardCount})。`;
      }
    }

    // 牌面互动关系分析
    reading += `\n\n### 🔄 牌面能量互动\n\n`;
    const firstCard = cards[0];
    const lastCard = cards[cards.length - 1];
    
    reading += `从 **${firstCard.chineseName || firstCard.name}** 到 **${lastCard.chineseName || lastCard.name}** 的能量流动显示：`;
    
    if (spread.name === 'Three Card Spread') {
      reading += `时间维度的能量演进，过去的根基正在转化为未来的可能性。`;
    } else if (spread.name === 'Love Pyramid Spread') {
      reading += `情感关系的多层能量结构，从个人感受到关系基础的完整映射。`;
    } else {
      reading += `多维度的能量交织，各个层面相互影响、相互强化。`;
    }

    // 针对问题的能量解读
    if (question) {
      reading += `\n\n### 🎯 问题能量共振\n\n`;
      if (question.includes('感情') || question.includes('爱情') || question.includes('关系')) {
        reading += `围绕感情问题的能量场显示出爱的多重频率：心灵的共鸣、情感的流动、以及关系的深层结构正在重新调整。`;
      } else if (question.includes('事业') || question.includes('工作') || question.includes('职业')) {
        reading += `事业能量场呈现出成功的多重要素：个人才华的激活、外在机遇的吸引、以及内在动力的持续释放。`;
      } else if (question.includes('财运') || question.includes('金钱') || question.includes('财富')) {
        reading += `财富能量流显示出丰盛的内在机制：价值创造的能力、资源流动的智慧、以及物质与精神的平衡发展。`;
      } else {
        reading += `围绕您的问题，能量场呈现出成长与转化的核心主题，宇宙正在为您的人生课题提供必要的能量支持。`;
      }
    }

    return {
      title: '整体能量解读',
      content: reading
    };
  }

  /**
   * 生成实用指导建议 - 专注具体行动方案
   */
  private static generatePracticalGuidance(
    cards: StoryTarotCard[], 
    spread: TarotSpread, 
    question: string
  ): { title: string; content: string } {
    const questionType = this.analyzeQuestionType(question);
    const firstCard = cards[0];
    const lastCard = cards[cards.length - 1];
    const majorCards = cards.filter(card => card.category === 'major');
    
    let guidance = `## 🎯 实用行动指南\n\n`;
    guidance += `基于${spread.name}显现的智慧，为您制定以下具体可执行的行动方案：`;

    // 立即行动计划（7天内）
    guidance += `\n\n### ⚡ 立即行动计划（未来7天）\n\n`;
    if (firstCard.category === 'major') {
      guidance += `**重要转机窗口** - ${firstCard.chineseName || firstCard.name}的能量显示，现在是采取关键行动的黄金时机：\n`;
      guidance += this.getCardActionAdvice(firstCard, 'immediate');
    } else {
      guidance += `**基础建设期** - ${firstCard.chineseName || firstCard.name}提醒您从小处着手：\n`;
      guidance += this.getCardActionAdvice(firstCard, 'immediate');
    }

    // 中期策略（1-3个月）
    guidance += `\n\n### 📋 中期发展策略（1-3个月）\n\n`;
    if (cards.length >= 2) {
      const middleCard = cards[Math.floor(cards.length / 2)];
      guidance += `**发展重点** - ${middleCard.chineseName || middleCard.name}指出您的核心发展方向：\n`;
      guidance += this.getCardActionAdvice(middleCard, 'medium');
    }

    // 长期目标布局（3-6个月）
    guidance += `\n\n### 🎖️ 长期目标布局（3-6个月）\n\n`;
    if (lastCard.category === 'major') {
      guidance += `**人生里程碑** - ${lastCard.chineseName || lastCard.name}指向您的重要人生目标：\n`;
      guidance += this.getCardActionAdvice(lastCard, 'longterm');
    } else {
      guidance += `**稳固发展** - ${lastCard.chineseName || lastCard.name}建议您建立可持续的成长模式：\n`;
      guidance += this.getCardActionAdvice(lastCard, 'longterm');
    }

    // 关键注意事项
    guidance += `\n\n### ⚠️ 关键注意事项\n\n`;
    if (majorCards.length > cards.length / 2) {
      guidance += `**重大决策期提醒**：\n`;
      guidance += `• 每个重要决定前，给自己24小时的思考时间\n`;
      guidance += `• 咨询信任的朋友或导师的意见\n`;
      guidance += `• 记录决策过程，定期回顾和调整\n`;
      guidance += `• 保持灵活性，随时准备调整策略`;
    } else {
      guidance += `**日常积累提醒**：\n`;
      guidance += `• 设定清晰的每日小目标\n`;
      guidance += `• 建立规律的作息和习惯\n`;
      guidance += `• 记录进展，庆祝小的胜利\n`;
      guidance += `• 保持耐心，信任积累的力量`;
    }

    // 针对具体问题类型的专业建议
    guidance += `\n\n### 🎪 专业领域指引\n\n`;
    switch (questionType) {
      case 'love':
        guidance += this.getLoveSpecificAdvice(cards);
        break;
      case 'career':
        guidance += this.getCareerSpecificAdvice(cards);
        break;
      case 'money':
        guidance += this.getMoneySpecificAdvice(cards);
        break;
      default:
        guidance += this.getGeneralLifeAdvice(cards);
    }

    // 实用工具推荐
    guidance += `\n\n### 🛠️ 实用工具推荐\n\n`;
    guidance += `**记录工具**：建议使用日记或手机应用记录每日进展\n`;
    guidance += `**提醒工具**：设置手机提醒，保持行动的连续性\n`;
    guidance += `**支持系统**：与信任的朋友分享您的目标，获得支持和监督\n`;
    guidance += `**评估工具**：每周日晚上花15分钟回顾和调整计划`;

    // 能量管理建议
    guidance += `\n\n### 🔋 能量管理建议\n\n`;
    if (majorCards.length > 0) {
      guidance += `**高能量期管理**：重大转变期需要充分休息，建议每晚保证7-8小时睡眠，适当冥想或瑜伽`;
    } else {
      guidance += `**稳定期优化**：保持规律作息，适量运动，均衡饮食，为长期发展储备能量`;
    }

    return {
      title: '智慧指引与行动建议',
      content: guidance
    };
  }

  /**
   * 获取卡牌具体行动建议
   */
  private static getCardActionAdvice(card: StoryTarotCard, timeframe: 'immediate' | 'medium' | 'longterm'): string {
    const actionMap: {[key: string]: {[key: string]: string}} = {
      'The Fool': {
        immediate: '• 今天就迈出第一步，哪怕很小\n• 列出3个可以立即开始的行动\n• 向一个新的可能性说"是"',
        medium: '• 制定学习新技能的计划\n• 寻找导师或学习伙伴\n• 定期走出舒适圈尝试新事物',
        longterm: '• 设定一个令人兴奋的长期目标\n• 建立支持创新和冒险的环境\n• 培养终身学习的习惯'
      },
      'The Magician': {
        immediate: '• 明确定义一个具体目标\n• 整理现有资源和工具\n• 开始第一个实际行动',
        medium: '• 学习新的专业技能\n• 建立个人品牌或专业形象\n• 寻找展示才能的机会',
        longterm: '• 成为某个领域的专家\n• 建立自己的事业或项目\n• 培养领导和影响他人的能力'
      },
      'The High Priestess': {
        immediate: '• 每天花10分钟安静冥想\n• 记录直觉和梦境\n• 倾听内心声音再做决定',
        medium: '• 学习冥想或灵性练习\n• 发展艺术或创意爱好\n• 增强自我觉察能力',
        longterm: '• 成为他人的智慧导师\n• 深入研究心理学或哲学\n• 建立深度的精神实践'
      }
    };

    const cardActions = actionMap[card.name];
    return cardActions?.[timeframe] || `• 根据${card.chineseName || card.name}的指引，专注于相关领域的具体行动\n• 保持开放和积极的心态\n• 相信自己的能力和判断`;
  }

  /**
   * 获取感情专业建议
   */
  private static getLoveSpecificAdvice(_cards: StoryTarotCard[]): string {
    let advice = `**💕 感情关系专业指导**\n\n`;
    advice += `**沟通提升**：\n`;
    advice += `• 每天与伴侣进行15分钟无打扰的深度对话\n`;
    advice += `• 学会用"我感受到..."而非"你总是..."的方式表达\n`;
    advice += `• 主动询问对方的需求和感受\n\n`;
    
    advice += `**关系建设**：\n`;
    advice += `• 每周安排一次专属的约会时间\n`;
    advice += `• 创造新的共同体验和回忆\n`;
    advice += `• 学会在冲突中寻找共同点\n\n`;
    
    advice += `**自我成长**：\n`;
    advice += `• 保持个人兴趣和朋友圈\n`;
    advice += `• 学会爱自己，不依赖他人获得自我价值\n`;
    advice += `• 定期反思自己在关系中的模式`;
    
    return advice;
  }

  /**
   * 获取事业专业建议
   */
  private static getCareerSpecificAdvice(_cards: StoryTarotCard[]): string {
    let advice = `**🚀 事业发展专业指导**\n\n`;
    advice += `**技能提升**：\n`;
    advice += `• 确定核心竞争力，制定6个月学习计划\n`;
    advice += `• 每月学习一项新的专业技能\n`;
    advice += `• 寻找行业导师或专业教练\n\n`;
    
    advice += `**人脉建设**：\n`;
    advice += `• 参加相关行业活动和会议\n`;
    advice += `• 在LinkedIn等平台建立专业形象\n`;
    advice += `• 主动帮助他人，建立互助关系\n\n`;
    
    advice += `**机会创造**：\n`;
    advice += `• 主动承担有挑战性的项目\n`;
    advice += `• 定期与上级讨论职业发展规划\n`;
    advice += `• 关注行业趋势，提前布局`;
    
    return advice;
  }

  /**
   * 获取财运专业建议
   */
  private static getMoneySpecificAdvice(_cards: StoryTarotCard[]): string {
    let advice = `**💰 财富管理专业指导**\n\n`;
    advice += `**理财规划**：\n`;
    advice += `• 建立应急基金（3-6个月生活费）\n`;
    advice += `• 学习基础投资知识，分散投资风险\n`;
    advice += `• 设定具体的财务目标和时间表\n\n`;
    
    advice += `**增收策略**：\n`;
    advice += `• 提升核心竞争力，争取加薪或升职\n`;
    advice += `• 发展副业或被动收入来源\n`;
    advice += `• 学习新技能，增加收入可能性\n\n`;
    
    advice += `**支出优化**：\n`;
    advice += `• 记录并分析每月支出结构\n`;
    advice += `• 区分需要和想要，优先满足真正需求\n`;
    advice += `• 寻找性价比更高的替代方案`;
    
    return advice;
  }

  /**
   * 获取通用人生建议
   */
  private static getGeneralLifeAdvice(_cards: StoryTarotCard[]): string {
    let advice = `**🌟 全面人生发展指导**\n\n`;
    advice += `**身心健康**：\n`;
    advice += `• 建立规律的运动习惯（每周至少3次）\n`;
    advice += `• 保证充足睡眠，维持良好作息\n`;
    advice += `• 学习压力管理技巧，如冥想或深呼吸\n\n`;
    
    advice += `**学习成长**：\n`;
    advice += `• 每月阅读至少2本书\n`;
    advice += `• 学习一门新技能或爱好\n`;
    advice += `• 定期反思和总结人生经验\n\n`;
    
    advice += `**人际关系**：\n`;
    advice += `• 定期与重要的人保持联系\n`;
    advice += `• 学会说不，保护自己的边界\n`;
    advice += `• 主动表达感激和关爱`;
    
    return advice;
  }

  /**
   * 生成洞察性总结 - 专注人生感悟和深层哲理
   */
  private static generateInsightfulSummary(
    cards: StoryTarotCard[], 
    _spread: TarotSpread, 
    question: string
  ): { title: string; content: string } {
    const keyCards = cards.slice(0, 2);
    const cardNames = cards.map(card => card.chineseName || card.name);
    const majorCount = cards.filter(card => card.category === 'major').length;

    // 专注于人生哲理的开场
    let summary = `## 💫 人生智慧启示\n\n`;
    summary += `在这次神圣的塔罗对话中，宇宙通过${cards.length}张牌为您传递了关于生命本质的深刻领悟。`;

    // 生命课题层面的洞察
    summary += `\n\n### 🌱 生命课题洞察\n\n`;
    if (majorCount === cards.length) {
      summary += `**全大阿尔卡纳的神圣显现** 表明您正站在灵魂进化的重要关口。这不仅仅是一个问题的解答，而是宇宙邀请您进入更高维度的人生体验。每一个挑战都是灵魂成长的阶梯。`;
    } else if (majorCount === 0) {
      summary += `**小阿尔卡纳的完整呈现** 提醒您，最深刻的智慧往往蕴藏在最平凡的日常中。生命的真谛不在于追求惊天动地的成就，而在于如何在平凡中发现神圣，在细微中体悟永恒。`;
    } else {
      summary += `**大小阿尔卡纳的智慧融合** 揭示了一个重要的人生真理：成长总是在精神觉醒与现实实践的交织中发生。您正在学习如何在物质世界中活出精神的丰盛。`;
    }

    // 基于关键卡牌的人生哲理
    if (keyCards.length > 0) {
      summary += `\n\n### 🔮 关键智慧解码\n\n`;
      const firstCard = keyCards[0];
      summary += `**${firstCard.chineseName || firstCard.name}** 作为您人生剧本的重要章节，提醒您：${this.getCardLifeWisdom(firstCard)}`;
      
      if (keyCards[1]) {
        const secondCard = keyCards[1];
        summary += ` 而 **${secondCard.chineseName || secondCard.name}** 则指向生命的另一个维度：${this.getCardLifeWisdom(secondCard)}`;
      }
      
      summary += ` 这两股智慧力量的交融，正在为您的人生编写新的可能性。`;
    }

    // 深层人生哲理基于问题类型
    summary += `\n\n### 🏛️ 人生哲理领悟\n\n`;
    if (question.includes('选择') || question.includes('决定')) {
      summary += `**关于选择的终极智慧**：真正的选择从来不是在外在选项之间的权衡，而是在不同版本的自己之间的抉择。每一次选择，都是在选择成为什么样的存在。您内心深处已经知道答案，塔罗只是帮您听见内心的声音。`;
    } else if (question.includes('困难') || question.includes('挑战') || question.includes('问题')) {
      summary += `**关于困难的深层奥秘**：困难不是生命对您的惩罚，而是宇宙给您的礼物。每一个挑战都是灵魂力量的试炼场，每一次苦难都是智慧的孵化器。当您学会在困难中寻找成长的黄金时，您就已经超越了困难本身。`;
    } else if (question.includes('未来') || question.includes('前景')) {
      summary += `**关于未来的宇宙法则**：未来不是一个固定的目的地等待您的到达，而是您每一个当下意念和行动的投影。您不是未来的受害者，而是未来的创造者。掌握当下的品质，就是掌握未来的形态。`;
    } else if (question.includes('感情') || question.includes('爱情')) {
      summary += `**关于爱情的神圣法则**：真正的爱情是两个完整灵魂的舞蹈，而不是两个缺失的拼图。爱不是为了填补空虚，而是为了分享丰盛。学会先爱自己，宇宙才会派遣最合适的灵魂来与您共舞。`;
    } else if (question.includes('事业') || question.includes('工作')) {
      summary += `**关于事业的生命意义**：真正的事业不仅仅是生存的手段，更是灵魂表达的舞台。最有意义的工作是那些能让您的天赋发光、让世界更美好的事业。成功的外在标准会变，但内在的成就感和对世界的贡献是永恒的。`;
    } else {
      summary += `**关于生命的终极感悟**：生命是一场神圣的旅程，每一个经历都是灵魂成长的养分。您不是在经历人生，您就是人生本身的创造者和体验者。在这个无限可能的宇宙中，您的存在本身就是一个奇迹。`;
    }

    // 时间维度的智慧
    summary += `\n\n### ⏰ 时间智慧指引\n\n`;
    if (majorCount >= 2) {
      summary += `**灵魂时间** 正在主导您的人生节奏。未来3-6个月将是您人生蜕变的关键期，请以更宽广的视野和更深的耐心来迎接这个转化过程。重要的不是速度，而是深度。`;
    } else {
      summary += `**物质时间** 正在为您的努力加速。接下来1-3个月您将看到具体的进展，但请记住：外在的变化是内在转变的反映。保持内心的清明，外在的成功会自然显现。`;
    }

    // 最终的人生启示
    summary += `\n\n### 🎭 最终人生启示\n\n`;
    summary += `**塔罗的最高智慧不是预言未来，而是唤醒您内在的神性智慧。** ${cardNames.join('、')}共同编织的故事告诉我们：您已经拥有了创造理想人生所需的一切力量和智慧。`;
    summary += `\n\n生命的艺术在于学会在不确定中保持信任，在挑战中发现机遇，在平凡中感受奇迹。愿您在人生的每一个转角都能记起自己的神圣本质，带着爱与智慧前行。🙏`;

    return {
      title: '核心启示与人生感悟',
      content: summary
    };
  }

  /**
   * 获取卡牌的人生智慧
   */
  private static getCardLifeWisdom(card: StoryTarotCard): string {
    const wisdomMap: {[key: string]: string} = {
      'The Fool': '生命最大的智慧是保持初心，在每一天都能以初学者的心态拥抱无限可能',
      'The Magician': '您拥有将意念转化为现实的神圣力量，关键是学会专注和相信',
      'The High Priestess': '最深的智慧来自内在的宁静，学会倾听内心比听从外界更重要',
      'The Empress': '爱与创造是生命的本质，您天生具备滋养和美化世界的能力',
      'The Emperor': '真正的权威来自内在的自律和对责任的承担，而非外在的控制',
      'The Hierophant': '传统智慧与个人创新需要平衡，在尊重中创新，在传承中突破',
      'The Lovers': '生命中最重要的选择都关乎爱，学会爱自己是爱他人的前提',
      'The Chariot': '意志力是人生的驾驭之道，但真正的胜利是内心的和谐统一',
      'Strength': '温柔的力量比暴力更强大，内在的勇气比外在的勇猛更持久',
      'The Hermit': '内在的光明是最可靠的向导，孤独是与真实自我相遇的必经之路',
      'Wheel of Fortune': '变化是生命的常态，学会在变化中保持内心的稳定是人生的艺术',
      'Justice': '宇宙的公正不在外在的法则，而在内心的诚实和行为的一致',
      'The Hanged Man': '有时停下来换个角度，比一直向前更有智慧',
      'Death': '结束是新开始的母亲，学会优雅地告别是人生的重要课题',
      'Temperance': '平衡不是静止，而是动态的和谐，中庸之道是智慧的体现',
      'The Devil': '真正的自由不是为所欲为，而是不被欲望所束缚',
      'The Tower': '有时旧世界必须崩塌，新世界才能建立，毁灭往往是重生的前奏',
      'The Star': '希望是黑暗中的明灯，相信美好是创造美好的开始',
      'The Moon': '不确定性中蕴含着无限可能，学会在朦胧中保持信任',
      'The Sun': '喜悦是生命的本质状态，您有权利过一个明亮而充满活力的人生',
      'Judgement': '真正的审判来自内心的觉醒，宽恕自己是重生的开始',
      'The World': '完整不是终点而是新起点，每一个结束都孕育着新的开始'
    };

    const chineseWisdomMap: {[key: string]: string} = {
      '愚者': '生命最大的智慧是保持初心，在每一天都能以初学者的心态拥抱无限可能',
      '魔术师': '您拥有将意念转化为现实的神圣力量，关键是学会专注和相信',
      '女祭司': '最深的智慧来自内在的宁静，学会倾听内心比听从外界更重要',
      '皇后': '爱与创造是生命的本质，您天生具备滋养和美化世界的能力',
      '皇帝': '真正的权威来自内在的自律和对责任的承担，而非外在的控制'
    };

    return wisdomMap[card.name] || chineseWisdomMap[card.chineseName || ''] || '生命中的每一个经历都蕴含着独特的智慧，关键是保持开放的心去领悟';
  }

  /**
   * 分析问题类型
   */
  private static analyzeQuestionType(question: string): 'love' | 'career' | 'money' | 'general' {
    const loveKeywords = ['感情', '爱情', '恋爱', '情感', '伴侣', '恋人', '婚姻', '关系'];
    const careerKeywords = ['事业', '工作', '职业', '升职', '跳槽', '创业', '学业', '考试'];
    const moneyKeywords = ['财运', '金钱', '财富', '投资', '理财', '收入', '赚钱', '经济'];

    if (loveKeywords.some(keyword => question.includes(keyword))) return 'love';
    if (careerKeywords.some(keyword => question.includes(keyword))) return 'career';
    if (moneyKeywords.some(keyword => question.includes(keyword))) return 'money';
    return 'general';
  }

  /**
   * 调用LLM API
   */
  private static async callLLMAPI(prompt: string): Promise<LLMResponse> {
    const { provider, apiKey, baseURL, model, temperature, maxTokens } = this.config;
    
    console.log('🔗 调用LLM API:', {
      provider,
      hasApiKey: !!apiKey,
      baseURL: baseURL || '默认',
      model: model || '默认'
    });
    
    const headers: Record<string, string> = {
      'Content-Type': 'application/json'
    };
    
    let url = '';
    let body: any = {};
    
    switch (provider) {
      case 'openai':
        url = baseURL || 'https://api.openai.com/v1/chat/completions';
        headers['Authorization'] = `Bearer ${apiKey}`;
        body = {
          model: model || 'gpt-3.5-turbo',
          messages: [{ role: 'user', content: prompt }],
          temperature,
          max_tokens: maxTokens
        };
        break;
        
      case 'deepseek':
        url = baseURL || 'https://api.deepseek.com/v1/chat/completions';
        headers['Authorization'] = `Bearer ${apiKey}`;
        body = {
          model: model || 'deepseek-chat',
          messages: [{ role: 'user', content: prompt }],
          temperature,
          max_tokens: maxTokens
        };
        break;
        
      case 'qianwen':
        url = baseURL || 'https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation';
        headers['Authorization'] = `Bearer ${apiKey}`;
        headers['X-DashScope-SSE'] = 'disable';
        body = {
          model: model || 'qwen-plus',
          input: {
            messages: [{ role: 'user', content: prompt }]
          },
          parameters: {
            temperature,
            max_tokens: maxTokens
          }
        };
        break;
        
      case 'claude':
        url = baseURL || 'https://api.anthropic.com/v1/messages';
        headers['Authorization'] = `Bearer ${apiKey}`;
        headers['anthropic-version'] = '2023-06-01';
        body = {
          model: model || 'claude-3-sonnet-20240229',
          messages: [{ role: 'user', content: prompt }],
          max_tokens: maxTokens || 4000
        };
        break;
        
      case 'custom':
        if (!baseURL) {
          throw new Error('自定义API需要配置baseURL');
        }
        url = baseURL;
        headers['Authorization'] = `Bearer ${apiKey}`;
        body = {
          model: model || 'gpt-3.5-turbo',
          messages: [{ role: 'user', content: prompt }],
          temperature,
          max_tokens: maxTokens
        };
        break;
        
      default:
        throw new Error(`不支持的LLM提供商: ${provider}`);
    }
    
    console.log('📡 发送API请求到:', url);
    
    const response = await fetch(url, {
      method: 'POST',
      headers,
      body: JSON.stringify(body)
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('❌ API请求失败:', {
        status: response.status,
        statusText: response.statusText,
        error: errorText
      });
      throw new Error(`LLM API请求失败: ${response.status} - ${errorText}`);
    }
    
    const data = await response.json();
    console.log('✅ API响应成功:', { hasContent: !!data });
    
    let content = '';
    switch (provider) {
      case 'openai':
      case 'deepseek':
      case 'custom':
        content = data.choices?.[0]?.message?.content || '';
        break;
      case 'qianwen':
        content = data.output?.text || data.output?.choices?.[0]?.message?.content || '';
        break;
      case 'claude':
        content = data.content?.[0]?.text || '';
        break;
      default:
        content = data.content || data.text || '';
    }
    
    return { content, usage: data.usage };
  }

  /**
   * 获取卦象解读
   */
  static async getHexagramInterpretation(hexagram: Hexagram, question?: string): Promise<string> {
    this.updateLoadingState({
      isLoading: true,
      progress: '正在准备卦象解读...',
      stage: 'preparing'
    });

    try {
      if (!this.config.apiKey) {
        console.warn('⚠️ 未配置LLM API密钥，使用本地卦象解读');
        
        const result = this.getLocalHexagramInterpretation(hexagram, question);
        
        this.updateLoadingState({
          isLoading: false,
          progress: '卦象解读完成',
          stage: 'completed'
        });
        
        return result;
      }
      
      const prompt = this.buildHexagramPrompt(hexagram, question);
      const response = await this.callLLMAPI(prompt);
      
      this.updateLoadingState({
        isLoading: false,
        progress: '卦象解读完成',
        stage: 'completed'
      });
      
      return response.content || this.getLocalHexagramInterpretation(hexagram, question);
    } catch (error) {
      console.error('❌ 卦象解读失败:', error);
      
      this.updateLoadingState({
        isLoading: false,
        progress: '解读失败，使用本地备用解读',
        stage: 'error'
      });
      
      return this.getLocalHexagramInterpretation(hexagram, question);
    }
  }

  private static getLocalHexagramInterpretation(hexagram: Hexagram, question?: string): string {
    const questionText = question ? `\n\n**您的问题**: ${question}` : '';
    
    return `## ${hexagram.name} (${hexagram.chineseName})

**卦象**: ${hexagram.symbol}
**卦辞**: ${hexagram.judgment}
**现代解读**: ${hexagram.modernInterpretation}
**核心含义**: ${hexagram.description}

**人生启示**: 
${hexagram.modernInterpretation || '此卦提醒我们要顺应自然规律，以智慧和耐心面对人生的挑战与机遇。'}

**建议**: 
根据这一卦象，建议您保持内心的平静与智慧，相信事物的发展都有其规律。${questionText}

愿这一卦象为您带来智慧与指引。🙏`;
  }

  private static buildHexagramPrompt(hexagram: Hexagram, question?: string): string {
    const questionText = question ? `\n\n用户问题: ${question}` : '';
    
    return `请为以下易经卦象提供深入的现代解读：

卦名: ${hexagram.name} (${hexagram.chineseName})
卦象: ${hexagram.symbol}
卦辞: ${hexagram.judgment}
现代解读: ${hexagram.modernInterpretation}
核心含义: ${hexagram.description}${questionText}

请提供深入分析和建议。`;
  }
  
  /**
   * 获取运势解读
   */
  static async getFortuneInterpretation(
    date: Date,
    birthDate?: Date,
    question?: string
  ): Promise<string> {
    this.updateLoadingState({
      isLoading: true,
      progress: '正在准备运势解读...',
      stage: 'preparing'
    });

    try {
      if (!this.config.apiKey) {
        console.warn('⚠️ 未配置LLM API密钥，使用本地运势解读');
        
        const result = this.getLocalFortuneInterpretation(date, birthDate, question);
        
        this.updateLoadingState({
          isLoading: false,
          progress: '运势解读完成',
          stage: 'completed'
        });
        
        return result;
      }
      
      const prompt = this.buildFortunePrompt(date, birthDate, question);
      const response = await this.callLLMAPI(prompt);
      
      this.updateLoadingState({
        isLoading: false,
        progress: '运势解读完成',
        stage: 'completed'
      });
      
      return response.content || this.getLocalFortuneInterpretation(date, birthDate, question);
    } catch (error) {
      console.error('❌ 运势解读失败:', error);
      
      this.updateLoadingState({
        isLoading: false,
        progress: '解读失败，使用本地备用解读',
        stage: 'error'
      });
      
      return this.getLocalFortuneInterpretation(date, birthDate, question);
    }
  }

  private static getLocalFortuneInterpretation(
    date: Date,
    birthDate?: Date,
    question?: string
  ): string {
    const dateStr = date.toLocaleDateString('zh-CN');
    const constellation = birthDate ? this.getConstellation(birthDate) : null;
    const questionText = question ? `\n\n**您的关注**: ${question}` : '';
    
    const fortuneElements = [
      '今日宜保持积极乐观的心态',
      '适合与他人交流合作',
      '注意把握机遇，但要谨慎决策'
    ];
    
    const selectedElements = fortuneElements
      .sort(() => Math.random() - 0.5)
      .slice(0, 2);
    
    const constellationText = constellation ? `\n\n**星座运势** (${constellation}): ${this.getConstellationTrait(constellation)}` : '';
    
    return `## ${dateStr} 运势解读

**整体运势**: ⭐⭐⭐⭐☆

**今日要点**:
${selectedElements.map(element => `• ${element}`).join('\n')}

**幸运色彩**: 蓝色、绿色
**幸运数字**: 3、7、9${constellationText}${questionText}

愿您今日顺心如意！🌟`;
  }

  private static buildFortunePrompt(date: Date, _birthDate?: Date, _question?: string): string {
    const dateStr = date.toLocaleDateString('zh-CN');
    return `请为${dateStr}提供运势解读。`;
  }
  
  private static getConstellation(birthDate: Date): string {
    const month = birthDate.getMonth() + 1;
    const day = birthDate.getDate();
    
    if ((month === 3 && day >= 21) || (month === 4 && day <= 19)) return '白羊座';
    if ((month === 4 && day >= 20) || (month === 5 && day <= 20)) return '金牛座';
    
    return '白羊座';
  }
  
  private static getConstellationTrait(constellation: string): string {
    const traits: {[key: string]: string} = {
      '白羊座': '充满活力和冒险精神，适合主动出击',
      '金牛座': '稳重踏实，今日适合处理实际事务'
    };
    
    return traits[constellation] || traits['白羊座'];
  }
}
