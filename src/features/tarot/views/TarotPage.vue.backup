<template>
  <div class="tarot-page min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900">
    <!-- 背景星空效果 -->
    <div class="stars-background">
      <div class="stars" v-for="n in 50" :key="n" 
           :style="{ 
             left: Math.random() * 100 + '%', 
             top: Math.random() * 100 + '%',
             animationDelay: Math.random() * 3 + 's'
           }">⭐</div>
    </div>

    <div class="container mx-auto px-4 py-8 relative z-10">
      <!-- 标题 -->
      <div class="text-center mb-12">
        <h1 class="text-5xl font-bold text-white mb-4 mystical-glow">🔮 塔罗占卜 🔮</h1>
        <p class="text-xl text-purple-200">探索命运的神秘面纱，聆听心灵的智慧之声</p>
      </div>

      <!-- 阶段1: 介绍和问题输入 -->
      <div v-if="currentStage === 'intro'" class="max-w-4xl mx-auto">
        <div class="bg-black/30 backdrop-blur-md rounded-3xl p-8 border border-purple-500/30 shadow-2xl">
          <div class="text-center mb-8">
            <div class="text-6xl mb-6 animate-pulse">🌟</div>
            <h2 class="text-3xl font-bold text-white mb-4">欢迎来到神秘的塔罗世界</h2>
            <p class="text-lg text-purple-200 mb-6 leading-relaxed">
              塔罗牌是古老的智慧结晶，能够帮助您探索内心深处的答案。<br>
              在开始占卜之前，请静下心来，专注于您想要了解的问题。
            </p>
          </div>

          <!-- 问题输入 -->
          <div class="mb-8">
            <!-- 弹幕高频问题区域 -->
            <div class="mb-6">
              <div class="text-center mb-4">
                <h3 class="text-lg font-medium text-purple-200 mb-2">💫 高频问题弹幕</h3>
                <p class="text-sm text-purple-300">点击飘过的问题可快速填充，悬停可点赞</p>
              </div>
              <div 
                ref="barrageArea"
                class="barrage-area relative w-full h-32 overflow-hidden bg-white/5 rounded-xl border border-purple-400/30 shadow-inner"
              ></div>
            </div>
            
            <label class="block text-white text-lg font-medium mb-4">
              💭 请输入您想要咨询的问题（可选）
            </label>
            <textarea 
              ref="questionInput"
              v-model="userQuestion"
              placeholder="例如：我的事业发展如何？我的感情运势怎样？我应该如何面对当前的困境？"
              class="w-full h-32 px-4 py-3 bg-white/10 border border-purple-400/50 rounded-lg text-white placeholder-purple-300 focus:outline-none focus:border-purple-400 focus:ring-2 focus:ring-purple-400/50 resize-none"
            ></textarea>
          </div>

          <div class="text-center">
            <button 
              @click="goToSpreadSelection" 
              class="bg-gradient-to-r from-purple-600 to-pink-600 text-white text-xl font-bold py-4 px-12 rounded-full shadow-lg hover:shadow-2xl transform hover:scale-105 transition-all duration-300 mystical-glow"
            >
              🎴 选择牌阵
            </button>
          </div>
        </div>
      </div>

      <!-- 阶段1.5: 牌阵选择 -->
      <div v-if="currentStage === 'spreadSelection'" class="max-w-6xl mx-auto">
        <div class="bg-black/30 backdrop-blur-md rounded-3xl p-8 border border-purple-500/30 shadow-2xl">
          <div class="text-center mb-12">
            <div class="text-5xl mb-6 animate-pulse">🔮</div>
            <h2 class="text-3xl font-bold text-white mb-4">选择您的专属牌阵</h2>
            <p class="text-lg text-purple-200 mb-8">每个牌阵都有其独特的智慧与启示，请根据您的问题选择最适合的牌阵</p>
          </div>

          <!-- 牌阵选择网格 -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            <div 
              v-for="(spread, index) in classicSpreads" 
              :key="spread.name"
              class="spread-card cursor-pointer transform transition-all duration-300 hover:scale-105 hover:-translate-y-2"
              :class="{ 'selected': selectedSpread?.name === spread.name }"
              @click="selectSpread(spread)"
            >
              <div class="bg-gradient-to-br from-purple-800/50 to-indigo-900/50 backdrop-blur-sm rounded-2xl p-6 border border-purple-400/30 shadow-xl h-full flex flex-col">
                <!-- 牌阵头部 -->
                <div class="text-center mb-4">
                  <div class="text-4xl mb-3">{{ getSpreadIcon(spread.name) }}</div>
                  <h3 class="text-xl font-bold text-white mb-2">{{ spread.chineseName }}</h3>
                  <div class="text-sm text-purple-300 mb-4">{{ spread.positions.length }}张牌</div>
                </div>

                <!-- 核心优势 - 最突出的位置 -->
                <div class="bg-gradient-to-r from-yellow-400/20 to-orange-400/20 rounded-xl p-4 mb-4 border border-yellow-400/40">
                  <div class="text-center">
                    <div class="text-yellow-200 text-sm font-bold mb-2 flex items-center justify-center">
                      <span class="mr-2">⭐</span>
                      <span>最擅长解决</span>
                    </div>
                    <div class="text-yellow-100 text-base font-semibold">{{ spread.bestFor[0] }}</div>
                  </div>
                </div>

                <!-- 其他适用场景 -->
                <div class="mb-4 flex-1">
                  <div class="text-purple-300 text-xs mb-2 text-center opacity-80">也适用于</div>
                  <div class="flex flex-wrap gap-1 justify-center">
                    <span 
                      v-for="purpose in spread.bestFor.slice(1, 3)" 
                      :key="purpose"
                      class="px-3 py-1 text-xs bg-purple-600/30 text-purple-200 rounded-full border border-purple-500/30"
                    >
                      {{ purpose }}
                    </span>
                  </div>
                </div>

                <!-- 简化描述 - 放在最底部 -->
                <div class="mt-auto pt-3 border-t border-purple-500/20">
                  <p class="text-xs text-purple-400 text-white opacity-80 leading-relaxed word-wrap: break-word; overflow-wrap: break-word;">
                    {{ spread.description.length > 40 ? spread.description.slice(0, 40) + '...' : spread.description }}
                  </p>
                </div>
              </div>
            </div>
          </div>

          <!-- 选中牌阵详情 -->
          <div v-if="selectedSpread" class="bg-purple-900/20 rounded-2xl p-6 mb-8 border border-purple-400/20">
            <h3 class="text-2xl font-bold text-white mb-4 text-center">{{ selectedSpread.chineseName }} 详细说明</h3>
            <p class="text-purple-200 mb-6 text-center leading-relaxed">{{ selectedSpread.description }}</p>
            
            <!-- 牌位说明 -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div 
                v-for="(position, index) in selectedSpread.positions" 
                :key="index"
                class="bg-black/20 rounded-lg p-4 border border-purple-400/20"
              >
                <div class="text-center">
                  <div class="text-2xl mb-2">{{ index + 1 }}</div>
                  <h4 class="text-white font-medium mb-2">{{ position.chineseName }}</h4>
                  <p class="text-purple-300 text-sm">{{ position.meaning }}</p>
                </div>
              </div>
            </div>
          </div>

          <!-- 操作按钮 -->
          <div class="flex justify-center space-x-6">
            <button 
              @click="goBackToIntro" 
              class="bg-gray-600 hover:bg-gray-700 text-white text-lg font-medium py-3 px-8 rounded-full transition-colors duration-300"
            >
              ← 返回
            </button>
            <button 
              @click="startReading" 
              :disabled="!selectedSpread"
              class="bg-gradient-to-r from-purple-600 to-pink-600 text-white text-lg font-bold py-3 px-12 rounded-full shadow-lg hover:shadow-2xl transform hover:scale-105 transition-all duration-300 mystical-glow disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
            >
              🎴 开始占卜
            </button>
          </div>
        </div>
      </div>

      <!-- 阶段2: 洗牌动画 -->
      <div v-if="currentStage === 'shuffling'" class="max-w-4xl mx-auto text-center">
        <div class="bg-black/30 backdrop-blur-md rounded-3xl p-12 border border-purple-500/30 shadow-2xl">
          <h2 class="text-3xl font-bold text-white mb-8">🌀 正在洗牌...</h2>
          <p class="text-lg text-purple-200 mb-8">请专注于您的问题，让宇宙的能量流入牌中</p>
          
          <div class="loading-dots">
            <span></span><span></span><span></span>
          </div>
        </div>
      </div>

      <!-- 阶段3: 抽牌 -->
      <div v-if="currentStage === 'drawing'" class="max-w-6xl mx-auto">
        <div class="bg-black/30 backdrop-blur-md rounded-3xl p-8 border border-purple-500/30 shadow-2xl">
          <div class="text-center mb-8">
            <h2 class="text-3xl font-bold text-white mb-4">✨ 选择您的命运之牌</h2>
            <p class="text-lg text-purple-200 mb-6">请用心感受，点击下方的牌来抽取您的{{ selectedSpread?.positions.length || 3 }}张牌</p>
            <p class="text-purple-300">已抽取: {{ drawnCards.length }} / {{ selectedSpread?.positions.length || 3 }}</p>
          </div>

          <!-- 牌堆展示 -->
          <div class="deck-spread flex justify-center items-center mb-8 flex-wrap gap-4">
            <div 
              v-for="n in Math.max(7, selectedSpread?.positions.length || 3)" 
              :key="n"
              class="deck-card cursor-pointer transform transition-all duration-500 hover:scale-110 hover:-translate-y-4"
              @click="drawCard(n)"
            >
              <div class="w-24 h-36 bg-gradient-to-br from-indigo-600 to-purple-700 rounded-lg shadow-lg flex items-center justify-center border border-purple-400/50">
                <div class="text-white text-3xl transform rotate-12">🃏</div>
              </div>
            </div>
          </div>

          <!-- 已抽取的牌位 -->
          <div class="drawn-positions mt-12">
            <div class="grid gap-4 grid-cols-1 md:grid-cols-3">
              <div 
                v-for="(position, index) in positions" 
                :key="index"
                class="position-slot"
              >
                <div class="text-center mb-4">
                  <h3 class="text-lg font-bold text-white mb-2">{{ position }}</h3>
                </div>
                <div 
                  class="card-slot w-28 h-40 mx-auto rounded-lg border-2 border-dashed border-purple-400/50 flex items-center justify-center"
                  :class="{ 'filled': drawnCards[index] }"
                >
                  <div v-if="!drawnCards[index]" class="text-purple-400 text-5xl opacity-50">?</div>
                  <div 
                    v-else 
                    class="drawn-card-preview w-full h-full bg-gradient-to-br from-purple-800 to-indigo-900 rounded-lg flex flex-col items-center justify-center transform animate-flip-in relative overflow-hidden border border-purple-400/50"
                  >
                    <div class="relative z-10 text-center">
                      <div class="text-white text-2xl mb-1 animate-pulse">🌟</div>
                      <div class="text-white/60 text-xs font-medium">已选择</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div v-if="drawnCards.length === (selectedSpread?.positions.length || 3)" class="text-center mt-8">
            <button 
              @click="revealCards" 
              class="bg-gradient-to-r from-pink-600 to-red-600 text-white text-xl font-bold py-4 px-12 rounded-full shadow-lg hover:shadow-2xl transform hover:scale-105 transition-all duration-300 mystical-glow"
            >
              ✨ 揭示命运
            </button>
          </div>
        </div>
      </div>

      <!-- 阶段4: 翻牌和解读 -->
      <div v-if="currentStage === 'reveal'" class="max-w-6xl mx-auto">
        <div class="bg-black/30 backdrop-blur-md rounded-3xl p-8 border border-purple-500/30 shadow-2xl">
          <h1 class="text-white text-5xl text-center">🎴 命运解读</h1>
          <p class="text-white text-center mt-4">您的塔罗牌已经揭示，让我们来解读命运的启示...</p>
          
          <!-- LLM加载状态显示 -->
          <div v-if="llmLoading" class="mt-8 mb-8">
            <div class="bg-gradient-to-r from-purple-600/20 to-indigo-600/20 rounded-2xl p-6 border border-purple-400/30">
              <div class="flex items-center justify-center mb-4">
                <div class="w-8 h-8 border-4 border-purple-400 border-t-transparent rounded-full animate-spin mr-3"></div>
                <h3 class="text-xl font-bold text-white">正在生成专业解读...</h3>
              </div>
              <div class="text-center">
                <p class="text-purple-200 mb-2">{{ llmLoadingMessage }}</p>
                <div class="w-full bg-purple-900/30 rounded-full h-2">
                  <div class="bg-gradient-to-r from-purple-500 to-pink-500 h-2 rounded-full transition-all duration-500" 
                       :class="{
                         'w-1/4': llmLoadingStage === 'preparing',
                         'w-2/4': llmLoadingStage === 'calling', 
                         'w-3/4': llmLoadingStage === 'processing',
                         'w-full': llmLoadingStage === 'completed'
                       }"></div>
                </div>
                <p class="text-purple-300 text-sm mt-2">请耐心等待，AI正在为您量身定制深度解读</p>
              </div>
            </div>
          </div>
          
          <!-- 问题回顾 -->
          <div class="mt-6 text-center">
            <div class="inline-block bg-gradient-to-r from-purple-600/30 to-pink-600/30 backdrop-blur-sm rounded-2xl px-6 py-3 border border-purple-400/30">
              <span class="text-purple-200 text-sm">您的问题：</span>
              <span class="text-white font-medium ml-2">{{ userQuestion }}</span>
            </div>
          </div>
          
          <!-- 显示抽到的牌 -->
          <div class="mt-8" v-if="interpretationResult">
            <h2 class="text-2xl font-bold text-white text-center mb-6">您抽到的牌</h2>
            
            <!-- 根据牌阵类型调整布局 -->
            <div v-if="selectedSpread?.name === 'Love Pyramid Spread'" class="relative max-w-4xl mx-auto">
              <!-- 恋人金字塔特殊布局 -->
              <div class="flex flex-col items-center space-y-6">
                <!-- 第一层：你的内心 -->
                <div class="flex justify-center">
                  <div class="card-container" v-if="interpretationResult.cards[0]">
                    <!-- 牌位标题 - 移到卡牌上方 -->
                    <div class="position-title-header mb-3 text-center">
                      <div class="inline-block bg-gradient-to-r from-purple-600/80 to-indigo-600/80 backdrop-blur-sm rounded-full px-4 py-2 border border-purple-400/40">
                        <span class="text-white font-bold text-sm">{{ interpretationResult.cards[0].position }}</span>
                      </div>
                    </div>
                    
                    <div class="tarot-card-container relative" :class="[
                      interpretationResult.cards[0].category === 'major' ? 'major-arcana' : 'minor-arcana',
                      `element-${interpretationResult.cards[0].element}`
                    ]">
                      <!-- 卡牌图片容器 - 移除位置覆盖层 -->
                      <div class="card-image-container mb-4 relative">
                        <img 
                          :src="interpretationResult.cards[0].imageUrl" 
                          :alt="interpretationResult.cards[0].name" 
                          class="tarot-card-image w-full h-48 object-cover rounded-lg"
                          @error="handleImageError"
                        />
                        <!-- 元素标记 -->
                        <div class="element-badge" :class="`element-${interpretationResult.cards[0].element}`">
                          {{ getElementSymbol(interpretationResult.cards[0].element) }}
                        </div>
                      </div>
                      
                      <!-- 卡牌基本信息 -->
                      <div class="card-info text-center">
                        <div class="text-purple-200 mb-2 font-semibold">{{ interpretationResult.cards[0].name }}</div>
                        <div class="text-sm text-purple-300 mb-3">{{ interpretationResult.cards[0].englishName }}</div>
                        <div class="text-xs text-purple-200 mb-2">
                          关键词: {{ getDisplayKeywords(interpretationResult.cards[0].keywords) }}
                        </div>
                        <!-- 卡牌解读悬停显示 -->
                        <div class="text-xs text-purple-300 cursor-help hover:text-purple-100 transition-colors duration-200" 
                             @mouseenter="showCardTooltip($event, interpretationResult.cards[0])"
                             @mouseleave="hideCardTooltip">
                          📖 卡牌解读
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                
                <!-- 第二层：对方内心 + 关系基础 -->
                <div class="flex justify-center space-x-8">
                  <div class="card-container" v-if="interpretationResult.cards[1]">
                    <!-- 牌位标题 - 移到卡牌上方 -->
                    <div class="position-title-header mb-3 text-center">
                      <div class="inline-block bg-gradient-to-r from-purple-600/80 to-indigo-600/80 backdrop-blur-sm rounded-full px-4 py-2 border border-purple-400/40">
                        <span class="text-white font-bold text-sm">{{ interpretationResult.cards[1].position }}</span>
                      </div>
                    </div>
                    
                    <div class="tarot-card-container relative" :class="[
                      interpretationResult.cards[1].category === 'major' ? 'major-arcana' : 'minor-arcana',
                      `element-${interpretationResult.cards[1].element}`
                    ]">
                      <div class="card-image-container mb-4 relative">
                        <img 
                          :src="interpretationResult.cards[1].imageUrl" 
                          :alt="interpretationResult.cards[1].name" 
                          class="tarot-card-image w-full h-48 object-cover rounded-lg"
                          @error="handleImageError"
                        />
                        <div class="element-badge" :class="`element-${interpretationResult.cards[1].element}`">
                          {{ getElementSymbol(interpretationResult.cards[1].element) }}
                        </div>
                      </div>
                      <div class="card-info text-center">
                        <div class="text-purple-200 mb-2 font-semibold">{{ interpretationResult.cards[1].name }}</div>
                        <div class="text-sm text-purple-300 mb-3">{{ interpretationResult.cards[1].englishName }}</div>
                        <div class="text-xs text-purple-200 mb-2">
                          关键词: {{ getDisplayKeywords(interpretationResult.cards[1].keywords) }}
                        </div>
                        <!-- 卡牌解读悬停显示 -->
                        <div class="text-xs text-purple-300 cursor-help hover:text-purple-100 transition-colors duration-200" 
                             @mouseenter="showCardTooltip($event, interpretationResult.cards[1])"
                             @mouseleave="hideCardTooltip">
                          📖 卡牌解读
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div class="card-container" v-if="interpretationResult.cards[2]">
                    <!-- 牌位标题 - 移到卡牌上方 -->
                    <div class="position-title-header mb-3 text-center">
                      <div class="inline-block bg-gradient-to-r from-purple-600/80 to-indigo-600/80 backdrop-blur-sm rounded-full px-4 py-2 border border-purple-400/40">
                        <span class="text-white font-bold text-sm">{{ interpretationResult.cards[2].position }}</span>
                      </div>
                    </div>
                    
                    <div class="tarot-card-container relative" :class="[
                      interpretationResult.cards[2].category === 'major' ? 'major-arcana' : 'minor-arcana',
                      `element-${interpretationResult.cards[2].element}`
                    ]">
                      <div class="card-image-container mb-4 relative">
                        <img 
                          :src="interpretationResult.cards[2].imageUrl" 
                          :alt="interpretationResult.cards[2].name" 
                          class="tarot-card-image w-full h-48 object-cover rounded-lg"
                          @error="handleImageError"
                        />
                        <div class="element-badge" :class="`element-${interpretationResult.cards[2].element}`">
                          {{ getElementSymbol(interpretationResult.cards[2].element) }}
                        </div>
                      </div>
                      <div class="card-info text-center">
                        <div class="text-purple-200 mb-2 font-semibold">{{ interpretationResult.cards[2].name }}</div>
                        <div class="text-sm text-purple-300 mb-3">{{ interpretationResult.cards[2].englishName }}</div>
                        <div class="text-xs text-purple-200 mb-2">
                          关键词: {{ getDisplayKeywords(interpretationResult.cards[2].keywords) }}
                        </div>
                        <!-- 卡牌解读悬停显示 -->
                        <div class="text-xs text-purple-300 cursor-help hover:text-purple-100 transition-colors duration-200" 
                             @mouseenter="showCardTooltip($event, interpretationResult.cards[2])"
                             @mouseleave="hideCardTooltip">
                          📖 卡牌解读
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                
                <!-- 第三层：关系未来 -->
                <div class="flex justify-center">
                  <div class="card-container" v-if="interpretationResult.cards[3]">
                    <!-- 牌位标题 - 移到卡牌上方 -->
                    <div class="position-title-header mb-3 text-center">
                      <div class="inline-block bg-gradient-to-r from-purple-600/80 to-indigo-600/80 backdrop-blur-sm rounded-full px-4 py-2 border border-purple-400/40">
                        <span class="text-white font-bold text-sm">{{ interpretationResult.cards[3].position }}</span>
                      </div>
                    </div>
                    
                    <div class="tarot-card-container relative" :class="[
                      interpretationResult.cards[3].category === 'major' ? 'major-arcana' : 'minor-arcana',
                      `element-${interpretationResult.cards[3].element}`
                    ]">
                      <div class="card-image-container mb-4 relative">
                        <img 
                          :src="interpretationResult.cards[3].imageUrl" 
                          :alt="interpretationResult.cards[3].name" 
                          class="tarot-card-image w-full h-48 object-cover rounded-lg"
                          @error="handleImageError"
                        />
                        <div class="element-badge" :class="`element-${interpretationResult.cards[3].element}`">
                          {{ getElementSymbol(interpretationResult.cards[3].element) }}
                        </div>
                      </div>
                      <div class="card-info text-center">
                        <div class="text-purple-200 mb-2 font-semibold">{{ interpretationResult.cards[3].name }}</div>
                        <div class="text-sm text-purple-300 mb-3">{{ interpretationResult.cards[3].englishName }}</div>
                        <div class="text-xs text-purple-200 mb-2">
                          关键词: {{ getDisplayKeywords(interpretationResult.cards[3].keywords) }}
                        </div>
                        <!-- 卡牌解读悬停显示 -->
                        <div class="text-xs text-purple-300 cursor-help hover:text-purple-100 transition-colors duration-200" 
                             @mouseenter="showCardTooltip($event, interpretationResult.cards[3])"
                             @mouseleave="hideCardTooltip">
                          📖 卡牌解读
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- 其他牌阵的优化布局 -->
            <div v-else class="grid gap-6" :class="getCardLayoutClass(interpretationResult.cards.length)">
              <div 
                v-for="(card, index) in interpretationResult.cards" 
                :key="index"
                class="text-center"
              >
                <!-- 牌位标题 - 移到卡牌上方 -->
                <div class="position-title-header mb-3 text-center">
                  <div class="inline-block bg-gradient-to-r from-purple-600/80 to-indigo-600/80 backdrop-blur-sm rounded-full px-4 py-2 border border-purple-400/40">
                    <span class="text-white font-bold text-sm">{{ card.position }}</span>
                  </div>
                </div>
                
                <div class="tarot-card-container relative" :class="[
                  card.category === 'major' ? 'major-arcana' : 'minor-arcana',
                  `element-${card.element}`
                ]">
                  <!-- 卡牌图片容器 - 移除位置覆盖层 -->
                  <div class="card-image-container mb-4 relative">
                    <img 
                      :src="card.imageUrl" 
                      :alt="card.name" 
                      :class="getCardImageClass(interpretationResult.cards.length)"
                      @error="handleImageError"
                    />
                    <!-- 元素标记 -->
                    <div class="element-badge" :class="`element-${card.element}`">
                      {{ getElementSymbol(card.element) }}
                    </div>
                  </div>
                  
                  <!-- 卡牌基本信息 -->
                  <div class="card-info text-center">
                    <div class="text-purple-200 mb-2 font-semibold">{{ card.name }}</div>
                    <div class="text-sm text-purple-300 mb-3">{{ card.englishName }}</div>
                    <div class="text-xs text-purple-200 mb-2">
                      关键词: {{ getDisplayKeywords(card.keywords) }}
                    </div>
                    <!-- 卡牌解读悬停显示 -->
                    <div class="text-xs text-purple-300 cursor-help hover:text-purple-100 transition-colors duration-200" 
                         @mouseenter="showCardTooltip($event, card)"
                         @mouseleave="hideCardTooltip">
                      📖 卡牌解读
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- 卡牌详细信息悬停提示框 -->
          <div 
            v-if="tooltipVisible" 
            ref="cardTooltip"
            class="card-tooltip"
            :style="tooltipStyle"
          >
            <div class="tooltip-content">
              <h4 class="font-bold text-white mb-2">{{ tooltipCard?.name }}</h4>
              <p class="text-sm text-purple-200 mb-3 leading-relaxed">{{ tooltipCard?.meaning || '这张牌蕴含着深刻的智慧与指引' }}</p>
              <div class="text-xs text-purple-300">
                关键词: {{ tooltipCard?.keywords || '神秘, 智慧, 指引' }}
              </div>
            </div>
          </div>
          
          <!-- 整体解读 -->
          <div class="mt-12" v-if="interpretationResult">
            <div class="bg-gradient-to-br from-indigo-900/40 to-purple-900/40 backdrop-blur-sm rounded-2xl p-6 border border-indigo-400/30 shadow-xl space-y-8">
              
              <!-- Overall Interpretation -->
              <div v-if="interpretationResult.overallInterpretation" class="bg-black/20 rounded-xl p-5 border border-purple-400/20">
                <h3 class="text-2xl font-bold text-white mb-4 text-center">🔮 {{ interpretationResult.overallInterpretation.title }}</h3>
                <p class="text-lg text-gray-200 leading-relaxed whitespace-pre-wrap">{{ interpretationResult.overallInterpretation.content }}</p>
              </div>

              <!-- Card by Card Interpretation -->
              <div v-if="interpretationResult.cardInterpretations && interpretationResult.cardInterpretations.length > 0">
                <h4 class="text-xl font-bold text-white mb-4 text-center">🃏 单牌解读</h4>
                <div class="space-y-4">
                  <div v-for="(card, index) in interpretationResult.cardInterpretations" :key="index" class="bg-black/20 rounded-xl p-4 border border-purple-400/20">
                    <h5 class="font-bold text-purple-300">{{ card.position }}: {{ card.cardName }}</h5>
                    <p class="text-gray-300 leading-relaxed whitespace-pre-wrap">{{ card.interpretation }}</p>
                  </div>
                </div>
              </div>

              <!-- Guidance -->
              <div v-if="interpretationResult.guidance" class="bg-black/20 rounded-xl p-5 border border-purple-400/20">
                <h4 class="text-xl font-bold text-white mb-4 text-center">💡 {{ interpretationResult.guidance.title }}</h4>
                <p class="text-lg text-gray-200 leading-relaxed whitespace-pre-wrap">{{ interpretationResult.guidance.content }}</p>
              </div>

              <!-- Summary -->
              <div v-if="interpretationResult.summary" class="bg-black/20 rounded-xl p-5 border border-purple-400/20">
                <h4 class="text-xl font-bold text-white mb-4 text-center">✨ {{ interpretationResult.summary.title }}</h4>
                <p class="text-lg text-gray-200 leading-relaxed whitespace-pre-wrap">{{ interpretationResult.summary.content }}</p>
              </div>

            </div>
          </div>

          <!-- 建议指导 -->
          <div class="mt-8" v-if="interpretationResult">
            <div class="bg-gradient-to-br from-purple-900/40 to-pink-900/40 backdrop-blur-sm rounded-2xl p-6 border border-purple-400/30 shadow-xl">
              <h3 class="text-2xl font-bold text-white mb-6 text-center">💡 建议指导</h3>
              <div class="bg-black/20 rounded-xl p-5 border border-purple-400/20">
                <p class="interpretation-text">{{ interpretationResult.guidance.content }}</p>
              </div>
            </div>
          </div>

          <!-- 占卜总结 -->
          <div class="mt-8" v-if="interpretationResult">
            <div class="bg-gradient-to-br from-indigo-900/50 to-purple-900/50 backdrop-blur-sm rounded-2xl p-6 border border-indigo-400/40 shadow-xl">
              <h3 class="text-2xl font-bold text-white mb-6 text-center">📋 占卜总结</h3>
              <div class="bg-black/30 rounded-xl p-5 border border-purple-400/30">
                <p class="interpretation-text">{{ interpretationResult.summary.content }}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, nextTick, onUnmounted } from 'vue';
import { storyTarotDeck, type StoryTarotCard } from '../utils/storyTarotData';
import { classicSpreads, type TarotSpread } from '../utils/tarotInterpretation';
import { LLMService } from '../../../services/LLMService';

// 在组件顶部预先导入LLMService，避免动态导入的延迟问题

// 解读结果类型定义
interface TarotInterpretationResult {
  cards: Array<{
    name: string;
    englishName: string;
    position: string;
    meaning: string;
    keywords: string;
    imageUrl: string;
    category: string;
    element: string;
  }>;
  overallInterpretation: {
    title: string;
    content: string;
  };
  cardInterpretations: Array<{
    position: string;
    cardName: string;
    interpretation: string;
  }>;
  guidance: {
    title: string;
    content: string;
  };
  summary: {
    title: string;
    content: string;
  };
}

// 阶段管理
type Stage = 'intro' | 'spreadSelection' | 'shuffling' | 'drawing' | 'reveal';
const currentStage = ref<Stage>('intro');

// 牌阵相关
const selectedSpread = ref<TarotSpread | null>(null);

// 基础数据
const userQuestion = ref('');
const positions = ref<string[]>(['过去', '现在', '未来']);
const drawnCards = ref<StoryTarotCard[]>([]);
const revealedCards = ref<boolean[]>([false, false, false]);

// 弹幕相关
const barrageArea = ref<HTMLElement | null>(null);
const questionInput = ref<HTMLTextAreaElement | null>(null);

// 定义弹幕项类型
interface BarrageItem {
  el: HTMLDivElement;
  text: string;
  likes: number;
  row: number;
  x: number;
  y: number;
  width: number;
  speed: number;
  paused: boolean;
}

const barrageItems = ref<BarrageItem[]>([]);
let animationFrame: number | null = null;

// 高频问题数据
const suggestions = ref([
  { text: '我的事业发展如何？', likes: 2 },
  { text: '我的感情运势怎样？', likes: 5 },
  { text: '近期财运如何？', likes: 1 },
  { text: '我该如何面对当前的困境？', likes: 3 },
  { text: '未来三个月会有什么新机会？', likes: 0 },
  { text: '我与某某的关系会如何发展？', likes: 1 },
  { text: '需要注意哪些健康问题？', likes: 0 },
  { text: '目前的选择是否正确？', likes: 0 },
  { text: '我的学业运势如何？', likes: 2 },
  { text: '什么时候会遇到真爱？', likes: 4 },
  { text: '我适合换工作吗？', likes: 1 },
  { text: '家庭关系如何改善？', likes: 0 },
  { text: '投资理财要注意什么？', likes: 1 },
  { text: '我的人际关系怎样？', likes: 0 },
  { text: '如何提升个人运势？', likes: 2 },
  { text: '今年会有什么重大变化？', likes: 1 }
]);

// 弹幕配置 - 优化速度基准
const BARRAGE_ROWS = 4; // 弹幕行数
const BARRAGE_HEIGHT = 120; // 弹幕区域总高度
const ROW_HEIGHT = 30; // 每行高度
const SPEED_MIN = 40; // 最小速度 (px/s)
const SPEED_MAX = 65; // 最大速度 (px/s)

// 音效控制
const soundEnabled = ref(true);

// LLM加载状态
const llmLoading = ref(false);
const llmLoadingMessage = ref('');
const llmLoadingStage = ref<'preparing' | 'calling' | 'processing' | 'completed' | 'error'>('preparing');

// 解读结果
const interpretationResult = ref<TarotInterpretationResult | null>(null);

// 方法定义
function goToSpreadSelection() {
  currentStage.value = 'spreadSelection';
}

function goBackToIntro() {
  currentStage.value = 'intro';
}

function selectSpread(spread: TarotSpread) {
  selectedSpread.value = spread;
  positions.value = spread.positions.map(p => p.chineseName);
  revealedCards.value = new Array(spread.positions.length).fill(false);
}

function getSpreadIcon(spreadName: string): string {
  const icons: Record<string, string> = {
    'Three Card Spread': '🔮',
    'Celtic Cross': '✨',
    'Love Pyramid Spread': '💕',
    'Career Path Spread': '🌟',
    'Decision Making Spread': '⚖️',
    'Past Present Future': '🕰️',
    'Relationship Spread': '💖'
  };
  return icons[spreadName] || '🎴';
}

// 弹幕相关方法
function initBarrage() {
  if (!barrageArea.value) return;
  
  // 启动弹幕动画
  startBarrageAnimation();
  
  // 定期添加新弹幕 - 更频繁的生成
  setInterval(() => {
    if (barrageItems.value.length < 12) { // 限制同时显示的弹幕数量
      addBarrageItem();
    }
  }, 1500); // 1.秒间隔
}

function startBarrageAnimation() {
  let lastTime = performance.now();
  
  function animate(currentTime: number) {
    const deltaTime = currentTime - lastTime;
    lastTime = currentTime;
    
    // 使用倒序遍历避免数组索引混乱
    for (let i = barrageItems.value.length - 1; i >= 0; i--) {
      const item = barrageItems.value[i];
      
      if (!item.paused) {
        // 基于时间的移动计算
        item.x -= (item.speed * deltaTime) / 1000;
        
        // 如果弹幕完全移出屏幕，移除它
        if (item.x + item.width < 0) {
          item.el.remove();
          barrageItems.value.splice(i, 1);
          continue;
        }
        
        // 更新位置 - 使用transform确保平滑移动
        item.el.style.transform = `translateX(${item.x}px)`;
      }
    }
    
    animationFrame = requestAnimationFrame(animate);
  }
  
  animate(lastTime);
}

function addBarrageItem() {
  if (!barrageArea.value) return;
  
  const suggestion = suggestions.value[Math.floor(Math.random() * suggestions.value.length)];
  const row = Math.floor(Math.random() * BARRAGE_ROWS); // 随机选择行
  
  const el = document.createElement('div');
  el.className = 'barrage-item absolute whitespace-nowrap cursor-pointer transition-all duration-200 hover:scale-105 select-none flex items-center gap-3';
  
  // 预设样式，避免闪现
  const containerWidth = barrageArea.value.offsetWidth;
  const initialX = containerWidth + 20;
  
  el.style.cssText = `
    top: ${row * ROW_HEIGHT}px;
    font-size: 16px;
    line-height: ${ROW_HEIGHT}px;
    height: ${ROW_HEIGHT - 4}px;
    color: rgba(196, 181, 253, 0.95);
    text-shadow: 0 0 6px rgba(147, 51, 234, 0.6);
    z-index: 10;
    padding: 6px 12px;
    background: rgba(0, 0, 0, 0.25);
    border-radius: 20px;
    border: 1px solid rgba(147, 51, 234, 0.4);
    backdrop-filter: blur(4px);
    will-change: transform;
    transform: translateX(${initialX}px);
  `;
  
  // 创建问题文本
  const textSpan = document.createElement('span');
  textSpan.textContent = suggestion.text;
  textSpan.className = 'barrage-text flex-1';
  
  // 创建Twitter风格的点赞按钮
  const likeButton = document.createElement('button');
  likeButton.className = 'like-button flex items-center gap-1 px-2 py-1 rounded-full transition-all duration-200 hover:bg-red-500/20 hover:scale-110';
  likeButton.innerHTML = `
    <svg class="w-4 h-4 transition-all duration-200 ${suggestion.likes > 0 ? 'text-red-500' : 'text-gray-400'}" 
         fill="${suggestion.likes > 0 ? 'currentColor' : 'none'}" 
         stroke="currentColor" 
         viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
            d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
    </svg>
    <span class="text-xs font-medium ${suggestion.likes > 0 ? 'text-red-500' : 'text-gray-400'}">${suggestion.likes}</span>
  `;
  
  el.appendChild(textSpan);
  el.appendChild(likeButton);
  
  // 添加到DOM后获取宽度
  barrageArea.value.appendChild(el);
  const width = el.offsetWidth;
  
  const item: BarrageItem = {
    el,
    text: suggestion.text,
    likes: suggestion.likes,
    row,
    x: initialX,
    y: row * ROW_HEIGHT,
    width,
    speed: SPEED_MIN + Math.random() * (SPEED_MAX - SPEED_MIN),
    paused: false
  };
  
  // 添加事件监听
  let pausedX = 0;
  el.addEventListener('mouseenter', () => {
    item.paused = true;
    pausedX = item.x; // 保存暂停时的位置
    el.style.backgroundColor = 'rgba(147, 51, 234, 0.5)';
    el.style.transform = `translateX(${pausedX}px) scale(1.05)`;
    el.style.boxShadow = '0 4px 20px rgba(147, 51, 234, 0.4)';
  });
  
  el.addEventListener('mouseleave', () => {
    item.paused = false;
    el.style.backgroundColor = 'rgba(0, 0, 0, 0.25)';
    el.style.transform = `translateX(${pausedX}px) scale(1)`;
    el.style.boxShadow = 'none';
  });
  
  // 点击文本填充到输入框
  textSpan.addEventListener('click', (e) => {
    e.stopPropagation();
    userQuestion.value = item.text;
    if (questionInput.value) {
      questionInput.value.focus();
    }
    
    // 移除弹幕
    item.el.remove();
    const itemIndex = barrageItems.value.indexOf(item);
    if (itemIndex !== -1) {
      barrageItems.value.splice(itemIndex, 1);
    }
  });
  
  // 点击点赞按钮
  likeButton.addEventListener('click', (e) => {
    e.stopPropagation();
    
    // 增加点赞数
    const suggestionIndex = suggestions.value.findIndex(s => s.text === item.text);
    if (suggestionIndex !== -1) {
      suggestions.value[suggestionIndex].likes++;
      item.likes = suggestions.value[suggestionIndex].likes;
      
      // 更新显示 - Twitter风格动画
      const likeCount = likeButton.querySelector('span');
      const heartIcon = likeButton.querySelector('svg');
      if (likeCount && heartIcon) {
        likeCount.textContent = item.likes.toString();
        likeCount.className = 'text-xs font-medium text-red-500';
        
        heartIcon.setAttribute('fill', 'currentColor');
        heartIcon.setAttribute('class', 'w-4 h-4 transition-all duration-200 text-red-500');
        
        // Twitter风格的点赞动画
        likeButton.style.transform = 'scale(1.3)';
        heartIcon.style.transform = 'scale(1.2)';
        
        setTimeout(() => {
          likeButton.style.transform = 'scale(1)';
          heartIcon.style.transform = 'scale(1)';
        }, 200);
        
        // 添加小心心飞出效果
        const flyHeart = document.createElement('div');
        flyHeart.innerHTML = '❤️';
        flyHeart.style.cssText = `
          position: absolute;
          font-size: 12px;
          pointer-events: none;
          animation: fly-heart 1s ease-out forwards;
          left: 50%;
          top: 50%;
          transform: translate(-50%, -50%);
        `;
        likeButton.appendChild(flyHeart);
        
        setTimeout(() => {
          flyHeart.remove();
        }, 1000);
      }
    }
  });
  
  // 添加到弹幕列表
  barrageItems.value.push(item);
}

async function startReading() {
  if (!selectedSpread.value) {
    selectedSpread.value = classicSpreads[0];
    positions.value = selectedSpread.value.positions.map(p => p.chineseName);
    revealedCards.value = new Array(selectedSpread.value.positions.length).fill(false);
  }
  
  currentStage.value = 'shuffling';
  
  if (soundEnabled.value) {
    playSound('shuffle');
  }

  await new Promise(resolve => setTimeout(resolve, 3000));
  
  currentStage.value = 'drawing';
}

async function drawCard(deckIndex: number) {
  const maxCards = selectedSpread.value?.positions.length || 3;
  if (drawnCards.value.length >= maxCards) return;

  if (soundEnabled.value) {
    playSound('draw');
  }

  const availableCards = storyTarotDeck.filter((card: StoryTarotCard) => 
    !drawnCards.value.some((drawn: StoryTarotCard) => drawn.id === card.id)
  );
  const randomCard = availableCards[Math.floor(Math.random() * availableCards.length)];
  
  drawnCards.value.push(randomCard);
}

async function revealCards() {
  if (!userQuestion.value.trim()) {
    alert('请先输入你想要咨询的问题');
    return;
  }
  
  if (!selectedSpread.value) {
    alert('请选择一个牌阵');
    return;
  }
  
  currentStage.value = 'reveal';
  
  if (soundEnabled.value) {
    playSound('reveal');
  }

  try {
    // 生成塔罗牌解读 - 现在是异步的
    interpretationResult.value = await generateInterpretation(drawnCards.value, selectedSpread.value, userQuestion.value);
  } catch (error) {
    console.error('生成塔罗解读失败:', error);
    alert('生成解读时出现错误，请重试');
  }
}

function toggleSound() {
  soundEnabled.value = !soundEnabled.value;
}

function playSound(type: string) {
  console.log(`播放音效: ${type}`);
}

// 生成塔罗牌解读 - 异步版本，集成LLM API
async function generateInterpretation(cards: StoryTarotCard[], spread: TarotSpread, question: string): Promise<TarotInterpretationResult> {
  try {
    console.log('🎯 开始生成塔罗牌解读...', { cardCount: cards.length, spreadName: spread.name, question });
    
    // 再次确保配置是最新的
    loadLLMConfig();
    
    // 验证当前配置
    const currentConfig = LLMService.getConfig();
    console.log('🔍 验证当前LLMService配置:', {
      provider: currentConfig.provider,
      hasApiKey: !!currentConfig.apiKey,
      baseURL: currentConfig.baseURL,
      model: currentConfig.model
    });
    
    // 调用LLM服务获取解读
    const llmResult = await LLMService.getTarotInterpretation(cards, spread, question);
    
    // 构建卡牌信息数组用于显示
    const cardInfos = cards.map((card, index) => {
      const position = spread.positions[index];
      const keywords = Array.isArray(card.keywords) ? card.keywords.join(', ') : card.keywords;
      const llmCardInterpretation = llmResult.cardInterpretations.find(
        (ci: any) => ci.cardName === card.name || ci.cardName === card.chineseName
      );
      
      return {
        name: card.chineseName,
        englishName: card.name,
        position: position.chineseName,
        meaning: llmCardInterpretation?.interpretation || getBasicCardMeaning(card, position),
        keywords,
        imageUrl: card.imageUrl,
        category: card.category,
        element: card.element
      };
    });

    console.log('✅ LLM解读生成成功');
    
    return {
      cards: cardInfos,
      overallInterpretation: llmResult.overallInterpretation,
      cardInterpretations: llmResult.cardInterpretations.map((ci: any) => ({
        position: ci.position,
        cardName: ci.cardName,
        interpretation: ci.interpretation
      })),
      guidance: llmResult.guidance,
      summary: llmResult.summary
    };
  } catch (error) {
    console.error('❌ LLM解读失败，使用本地备用解读:', error);
    
    // 如果LLM调用失败，使用本地解读作为备用
    const cardInfos = cards.map((card, index) => {
      const position = spread.positions[index];
      const keywords = Array.isArray(card.keywords) ? card.keywords.join(', ') : card.keywords;
      const baseMeaning = getBasicCardMeaning(card, position);
      
      return {
        name: card.chineseName,
        englishName: card.name,
        position: position.chineseName,
        meaning: baseMeaning,
        keywords,
        imageUrl: card.imageUrl,
        category: card.category,
        element: card.element
      };
    });

    // 使用本地解读生成完整结果
    const overallInterpretation = generateOverallInterpretation(cardInfos, spread, question);
    const cardInterpretations = generateCardInterpretations(cardInfos, spread, question);
    const guidance = generateGuidance(cardInfos, question);
    const summary = generateSummary(cardInfos, spread);
    
    return {
      cards: cardInfos,
      overallInterpretation,
      cardInterpretations,
      guidance,
      summary
    };
  }
}

// 获取基础卡牌含义
function getBasicCardMeaning(card: StoryTarotCard, position: any): string {
  const baseMeaning = card.storyInterpretation || '这张牌蕴含着深刻的智慧';
  if (card.category === 'major') {
    return `在"${position.chineseName}"的位置上，${card.chineseName}告诉我们：${baseMeaning} ${position.meaning}`;
  } else {
    const suitName = getSuitChineseName(card.suit || '');
    return `在"${position.chineseName}"的位置上，${card.chineseName}带来${suitName}的能量。${baseMeaning} ${position.meaning}`;
  }
}

// 获取花色中文名
function getSuitChineseName(suit: string): string {
  const suitMap: Record<string, string> = {
    'wands': '火元素权杖',
    'cups': '水元素圣杯',
    'swords': '风元素宝剑',
    'pentacles': '土元素星币'
  };
  return suitMap[suit.toLowerCase()] || '神秘';
}

// 生成建议指导
function generateAdvice(cards: any[], question: string): string {
  const advice = [
    "保持内心的平静与专注，倾听直觉的声音。",
    "勇敢面对挑战，相信自己的能力和智慧。",
    "注意平衡生活的各个方面，避免过度偏重某一领域。",
    "与他人真诚交流，寻求支持和理解。",
    "关注当下的机会，适时采取行动。",
    "学会释放过去的包袱，拥抱未来的可能。",
    "培养耐心，有些事情需要时间来发展。",
    "相信直觉，它往往能指引正确的方向。"
  ];
  
  // 根据卡牌特征选择合适的建议
  const majorCards = cards.filter(card => card.category === 'major');
  if (majorCards.length > 0) {
    return "大阿尔卡纳的出现表明这是人生的重要时刻。" + advice[Math.floor(Math.random() * advice.length)];
  }
  
  return advice[Math.floor(Math.random() * advice.length)];
}

// 生成总结
function generateSummary(cards: any[], spread: TarotSpread): { title: string; content: string } {
  const cardCount = cards.length;
  const majorCount = cards.filter(card => card.category === 'major').length;
  
  let summary = `通过${spread.chineseName}的指引，${cardCount}张牌为您的问题揭示了重要的洞察。`;
  
  if (majorCount > 0) {
    summary += `其中${majorCount}张大阿尔卡纳牌的出现，表明这个问题涉及人生的重要课题。`;
  }
  
  summary += "相信塔罗牌的智慧，它将帮助您在人生的道路上做出更明智的选择。";
  
  return {
    title: '占卜总结',
    content: summary
  };
}

// 重新开始占卜
function resetReading() {
  currentStage.value = 'intro';
  selectedSpread.value = null;
  userQuestion.value = '';
  drawnCards.value = [];
  revealedCards.value = [false, false, false];
  interpretationResult.value = null;
  positions.value = ['过去', '现在', '未来'];
}

// 处理图片加载错误
function handleImageError(event: Event) {
  const img = event.target as HTMLImageElement;
  img.src = '/static/tarot/- 00_fool_jpg (愚者).png'; // 使用愚者牌作为默认图片
}

// 获取元素符号
function getElementSymbol(element: string): string {
  const symbols: Record<string, string> = {
    fire: '🔥',
    water: '💧',
    air: '💨',
    earth: '🌍'
  };
  return symbols[element] || '✨';
}

// 卡牌详细信息悬停提示框
const tooltipVisible = ref(false);
const tooltipCard = ref<{ name: string; meaning: string; keywords: string } | null>(null);
const tooltipStyle = ref<{ left: string; top: string }>({ left: '0px', top: '0px' });

 function showCardTooltip(event: MouseEvent, card: any) {
   tooltipVisible.value = true;
   // 构建完整的提示框数据
   tooltipCard.value = {
     name: card.name || card.chineseName,
     meaning: card.meaning || card.interpretation || '这张牌蕴含着深刻的智慧与指引',
     keywords: card.keywords || '神秘, 智慧, 指引'
   };
   const target = event.target as HTMLElement;
   if (target) {
     const rect = target.getBoundingClientRect();
     
     // 优化定位逻辑，确保提示框在视口内
     const viewportWidth = window.innerWidth;
     const viewportHeight = window.innerHeight;
     const tooltipWidth = 280; // 预估提示框宽度
     const tooltipHeight = 120; // 预估提示框高度
     
     let left = rect.left + rect.width / 2 - tooltipWidth / 2;
     let top = rect.top - tooltipHeight - 10;
     
     // 水平边界检查
     if (left < 10) left = 10;
     if (left + tooltipWidth > viewportWidth - 10) left = viewportWidth - tooltipWidth - 10;
     
     // 垂直边界检查，如果上方空间不足，显示在下方
     if (top < 10) {
       top = rect.bottom + 10;
     }
     
     tooltipStyle.value = {
       left: `${left}px`,
       top: `${top}px`
     };
   }
 }

function hideCardTooltip() {
  tooltipVisible.value = false;
  tooltipCard.value = null;
  tooltipStyle.value = { left: '0px', top: '0px' };
}

function getDisplayKeywords(keywords: string | string[]): string {
  if (Array.isArray(keywords)) {
    return keywords.join(', ');
  } else if (typeof keywords === 'string') {
    return keywords;
  } else {
    return '';
  }
}

// 获取卡牌布局类
function getCardLayoutClass(cardCount: number): string {
  switch (cardCount) {
    case 1:
      return 'grid-cols-1';
    case 2:
      return 'grid-cols-1 md:grid-cols-2';
    case 3:
      return 'grid-cols-1 md:grid-cols-3';
    case 4:
      return 'grid-cols-1 md:grid-cols-2 lg:grid-cols-4';
    case 5:
      return 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3';
    default:
      return 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3';
  }
}

// 获取卡牌图片尺寸类
function getCardImageClass(cardCount: number): string {
  const baseClass = 'tarot-card-image w-full object-cover rounded-lg';
  switch (cardCount) {
    case 1:
    case 2:
    case 3:
      return `${baseClass} h-48`;
    case 4:
      return `${baseClass} h-40 lg:h-36`;
    case 5:
    case 6:
      return `${baseClass} h-36`;
    default:
      return `${baseClass} h-32`;
  }
}

// 组件挂载时预加载LLM配置
onMounted(() => {
  // 预加载LLM配置
  loadLLMConfig();
  
  // 初始化弹幕
  nextTick(() => {
    initBarrage();
  });
});

// 预加载LLM配置函数
function loadLLMConfig() {
  try {
    const saved = localStorage.getItem('llm-config');
    if (saved) {
      const config = JSON.parse(saved);
      console.log('🚀 预加载LLM配置:', {
        provider: config.provider,
        hasApiKey: !!config.apiKey,
        baseURL: config.baseURL
      });
      LLMService.setConfig(config);
    } else {
      console.log('📝 未找到LLM配置，将使用默认本地解读');
    }
  } catch (error) {
    console.error('❌ 预加载LLM配置失败:', error);
  }
}
async function generateInterpretation(cards: StoryTarotCard[], spread: TarotSpread, question: string): Promise<TarotInterpretationResult> {
  try {
    console.log('🎯 开始生成塔罗牌解读...', { cardCount: cards.length, spreadName: spread.name, question });
    
    // 再次确保配置是最新的
    loadLLMConfig();
    
    // 验证当前配置
    const currentConfig = LLMService.getConfig();
    console.log('🔍 验证当前LLMService配置:', {
      provider: currentConfig.provider,
      hasApiKey: !!currentConfig.apiKey,
      baseURL: currentConfig.baseURL,
      model: currentConfig.model
    });
    
    // 调用LLM服务获取解读
    const llmResult = await LLMService.getTarotInterpretation(cards, spread, question);
    
    // 构建卡牌信息数组用于显示
    const cardInfos = cards.map((card, index) => {
      const position = spread.positions[index];
      const keywords = Array.isArray(card.keywords) ? card.keywords.join(', ') : card.keywords;
      const llmCardInterpretation = llmResult.cardInterpretations.find(
        (ci: any) => ci.cardName === card.name || ci.cardName === card.chineseName
      );
      
      return {
        name: card.chineseName,
        englishName: card.name,
        position: position.chineseName,
        meaning: llmCardInterpretation?.interpretation || getBasicCardMeaning(card, position),
        keywords,
        imageUrl: card.imageUrl,
        category: card.category,
        element: card.element
      };
    });

    console.log('✅ LLM解读生成成功');
    
    return {
      cards: cardInfos,
      overallInterpretation: llmResult.overallInterpretation,
      cardInterpretations: llmResult.cardInterpretations.map((ci: any) => ({
        position: ci.position,
        cardName: ci.cardName,
        interpretation: ci.interpretation
      })),
      guidance: llmResult.guidance,
      summary: llmResult.summary
    };
  } catch (error) {
    console.error('❌ LLM解读失败，使用本地备用解读:', error);
    
    // 如果LLM调用失败，使用本地解读作为备用
    const cardInfos = cards.map((card, index) => {
      const position = spread.positions[index];
      const keywords = Array.isArray(card.keywords) ? card.keywords.join(', ') : card.keywords;
      const baseMeaning = getBasicCardMeaning(card, position);
      
      return {
        name: card.chineseName,
        englishName: card.name,
        position: position.chineseName,
        meaning: baseMeaning,
        keywords,
        imageUrl: card.imageUrl,
        category: card.category,
        element: card.element
      };
    });

    // 使用本地解读生成完整结果
    const overallInterpretation = generateOverallInterpretation(cardInfos, spread, question);
    const cardInterpretations = generateCardInterpretations(cardInfos, spread, question);
    const guidance = generateGuidance(cardInfos, question);
    const summary = generateSummary(cardInfos, spread);
    
    return {
      cards: cardInfos,
      overallInterpretation,
      cardInterpretations,
      guidance,
      summary
    };
  }
}

// 生成整体解读
function generateOverallInterpretation(cards: any[], spread: TarotSpread, question: string): { title: string; content: string } {
  const cardCount = cards.length;
  let reading = '';
  
  // 基于牌阵类型生成解读
  switch (spread.chineseName) {
    case '三张牌占卜法':
      reading = `通过三张牌的时间线布局，我们看到了你的完整故事脉络。过去的经历如何塑造现在，现在的选择又将如何影响未来。这三张牌共同编织出一个关于"${question}"的完整答案。`;
      break;
    case '恋人金字塔':
      reading = `恋人金字塔为你揭示了感情的全貌：从关系的根基到双方的内心世界，再到未来的发展方向。这四张牌为你的感情问题"${question}"提供了全方位的洞察。`;
      break;
    case '二选一牌阵':
      reading = `面对选择的十字路口，五张牌为你照亮了前进的道路。从当前状况到两个选择的对比，再到隐藏的影响因素和最佳路径，这个牌阵为"${question}"提供了全面的指导。`;
      break;
    case '财富之树':
      reading = `财富之树为你展现了金钱能量的完整流动。从根基到成长，从障碍到机遇，最终到收获，这五张牌揭示了关于"${question}"的财富密码。`;
      break;
    case '六芒星牌阵':
      reading = `六芒星的神圣几何为你打开了多维度的视角。从意识到潜意识，从过去到未来，从内在到外在，这七张牌为"${question}"提供了深层次的全方位解读。`;
      break;
    case '凯尔特牌阵':
      reading = `古老的凯尔特十字为你展开了命运的全景图。十张牌从核心问题出发，层层剖析影响因素，最终指向结果。这是对"${question}"最深入、最全面的探索。`;
      break;
    default:
      reading = `这${cardCount}张牌的组合为你的问题"${question}"提供了多维度的解答。每张牌都在其特定的位置上发挥着独特的作用，共同构成了一个完整的指导体系。`;
  }
  
  // 分析牌面的整体能量
  const majorCount = cards.filter(card => card.category === 'major').length;
  const minorCount = cards.filter(card => card.category === 'minor').length;
  
  if (majorCount > minorCount) {
    reading += ` 值得注意的是，大阿尔卡纳牌占主导地位，这表明宇宙的重大力量正在影响这个情况，这是一个具有深远意义的转折点。`;
  } else if (minorCount > majorCount) {
    reading += ` 小阿尔卡纳牌的主导地位表明，这个情况更多地与日常生活的具体细节和实际行动相关。`;
  } else {
    reading += ` 大小阿尔卡纳的平衡分布显示了精神层面和物质层面的和谐统一。`;
  }
  
  return {
    title: '整体解读',
    content: reading
  };
}

// 生成单牌解读
function generateCardInterpretations(cards: any[], spread: TarotSpread, question: string): { position: string; cardName: string; interpretation: string }[] {
  return cards.map((card, index) => {
    const position = spread.positions[index];
    
    return {
      position: position.chineseName,
      cardName: card.name,
      interpretation: card.meaning
    };
  });
}

// 生成建议指导
function generateGuidance(cards: any[], question: string): { title: string; content: string } {
  const advice = generateAdvice(cards, question);
  
  return {
    title: '建议指导',
    content: advice
  };
}

// 组件卸载时清理
onUnmounted(() => {
  if (animationFrame) {
    cancelAnimationFrame(animationFrame);
  }
});

// 获取牌阵洞察
function getSpreadInsight() {
  return `通过${selectedSpread.value?.chineseName}，塔罗牌为您的问题提供了深入的洞察。`;
}

// 获取能量分析
function getEnergyAnalysis() {
  const cards = drawnCards.value;
  const majorCount = cards.filter(card => card.category === 'major').length;
  const minorCount = cards.filter(card => card.category === 'minor').length;
  
  if (majorCount > minorCount) {
    return `大阿尔卡纳牌占主导地位，这表明宇宙的重大力量正在影响这个情况，这是一个具有深远意义的转折点。`;
  } else if (minorCount > majorCount) {
    return `小阿尔卡纳牌的主导地位表明，这个情况更多地与日常生活的具体细节和实际行动相关。`;
  } else {
    return `大小阿尔卡纳的平衡分布显示了精神层面和物质层面的和谐统一。`;
  }
}

// 获取核心信息
function getCoreMessage() {
  if (!interpretationResult.value) return '';
  const question = userQuestion.value;
  const spreadName = selectedSpread.value?.chineseName || '';
  
  if (question.includes('感情') || question.includes('爱情')) {
    return `本次占卜的核心主题是感情关系的探索与发展。通过${spreadName}，塔罗牌为您揭示了感情道路上的关键信息。`;
  } else if (question.includes('事业') || question.includes('工作')) {
    return `本次占卜的核心主题是事业发展与职业规划。${spreadName}为您指明了职业道路上的机遇与挑战。`;
  } else if (question.includes('财运') || question.includes('金钱')) {
    return `本次占卜的核心主题是财富积累与理财规划。通过${spreadName}，您将了解财运的变化趋势。`;
  }
  return `本次占卜围绕您的人生问题展开，${spreadName}为您提供了全面的指导与启示。`;
}

// 获取关键卡牌
function getKeyCards() {
  if (!drawnCards.value.length) return [];
  
  return drawnCards.value.slice(0, 2).map((card, index) => ({
    name: card.chineseName,
    position: selectedSpread.value?.positions[index]?.chineseName || '',
    significance: card.category === 'major' 
      ? '大阿尔卡纳牌，代表重要的人生转折和深层影响'
      : '小阿尔卡纳牌，提示具体的行动方向和日常影响'
  }));
}

// 获取时间框架
function getTimeframe() {
  const majorCount = drawnCards.value.filter(card => card.category === 'major').length;
  
  if (majorCount >= 2) {
    return '3-6个月内将看到重要变化，这是一个关键的转折期';
  } else {
    return '1-3个月内会有明显进展，建议保持耐心和持续努力';
  }
}

// 获取下一步行动
function getNextSteps() {
  const question = userQuestion.value;
  
  if (question.includes('感情')) {
    return '主动沟通，表达真实想法，创造更多相处机会';
  } else if (question.includes('事业')) {
    return '制定明确目标，提升专业技能，积极寻找发展机会';
  } else if (question.includes('财运')) {
    return '制定理财计划，控制支出，寻找增收渠道';
  }
  return '保持积极心态，制定具体计划，循序渐进地实现目标';
}

// 获取最终启示
function getFinalRevelation() {
  const cardNames = drawnCards.value.map(card => card.chineseName).join('、');
  return `${cardNames}共同传达的信息是：命运掌握在您自己手中。塔罗牌只是智慧的指引，最终的选择和行动都需要您自己去完成。相信内心的声音，勇敢地走向属于您的未来。`;
}
</script>

<style scoped>
.mystical-glow {
  text-shadow: 0 0 20px rgba(147, 51, 234, 0.8);
}

.stars-background {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  pointer-events: none;
}

.stars {
  position: absolute;
  font-size: 1rem;
  animation: twinkle 3s ease-in-out infinite;
}

@keyframes twinkle {
  0%, 100% { opacity: 0.3; transform: scale(1); }
  50% { opacity: 1; transform: scale(1.2); }
}

.loading-dots {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 8px;
}

.loading-dots span {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: linear-gradient(45deg, #8b5cf6, #ec4899);
  animation: loading 1.4s ease-in-out infinite both;
}

.loading-dots span:nth-child(1) { animation-delay: -0.32s; }
.loading-dots span:nth-child(2) { animation-delay: -0.16s; }

@keyframes loading {
  0%, 80%, 100% { transform: scale(0); }
  40% { transform: scale(1); }
}

.animate-flip-in {
  animation: flipIn 0.6s ease-out;
}

@keyframes flipIn {
  from {
    transform: perspective(400px) rotateY(90deg);
    opacity: 0;
  }
  to {
    transform: perspective(400px) rotateY(0deg);
    opacity: 1;
  }
}

.spread-card.selected {
  transform: scale(1.05) translateY(-5px) !important;
  filter: brightness(1.2);
  box-shadow: 0 15px 40px rgba(147, 51, 234, 0.6);
}

.spread-card.selected > div {
  border-color: #8b5cf6;
  background: linear-gradient(135deg, rgba(139, 92, 246, 0.3), rgba(99, 102, 241, 0.3));
}

/* 弹幕样式 */
.barrage-area {
  position: relative;
  overflow: hidden;
  height: 120px; /* 匹配BARRAGE_HEIGHT */
}

.barrage-item {
  font-weight: 500;
  text-shadow: 0 0 4px rgba(147, 51, 234, 0.5);
  user-select: none;
  backdrop-filter: blur(8px);
  transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.2s ease;
  will-change: transform;
}

.barrage-item:hover {
  color: rgba(255, 255, 255, 0.95) !important;
  text-shadow: 0 0 8px rgba(147, 51, 234, 0.8);
  backdrop-filter: blur(12px);
}

/* Twitter风格点赞按钮样式 */
.like-button {
  position: relative;
  overflow: hidden;
}

.like-button:hover svg {
  transform: scale(1.1);
}

.like-button:active {
  transform: scale(0.95);
}

/* 点赞飞心动画 */
@keyframes fly-heart {
  0% {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }
  50% {
    opacity: 0.8;
    transform: translate(-50%, -80px) scale(1.2);
  }
  100% {
    opacity: 0;
    transform: translate(-50%, -120px) scale(0.8);
  }
}

/* 弹幕文本样式 */
.barrage-item .barrage-text {
  max-width: 300px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* 弹幕悬停效果增强 */
.barrage-item:hover {
  z-index: 20 !important;
  box-shadow: 0 8px 32px rgba(147, 51, 234, 0.4);
}

/* 点赞按钮渐变效果 */
.like-button:hover {
  background: linear-gradient(135deg, rgba(239, 68, 68, 0.2), rgba(220, 38, 127, 0.2));
}

/* 弹幕区域背景优化 */
.barrage-area::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(90deg, 
    rgba(147, 51, 234, 0.05) 0%, 
    rgba(147, 51, 234, 0.02) 50%, 
    rgba(147, 51, 234, 0.05) 100%);
  pointer-events: none;
}

/* 恋人金字塔布局样式 */
.love-pyramid-layout {
  position: relative;
}

.love-pyramid-layout::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 2px;
  height: 100px;
  background: linear-gradient(to bottom, rgba(147, 51, 234, 0.3), transparent);
  transform: translateX(-50%);
  z-index: 0;
}

.pyramid-top,
.pyramid-bottom {
  position: relative;
  z-index: 1;
}

/* 金字塔连接线效果 */
.love-pyramid-layout .pyramid-top::after {
  content: '';
  position: absolute;
  bottom: -40px;
  left: 50%;
  width: 200px;
  height: 1px;
  background: linear-gradient(to right, transparent, rgba(147, 51, 234, 0.3), transparent);
  transform: translateX(-50%);
}

.love-pyramid-layout .pyramid-bottom::before {
  content: '';
  position: absolute;
  top: -40px;
  left: 50%;
  width: 300px;
  height: 1px;
  background: linear-gradient(to right, transparent, rgba(147, 51, 234, 0.3), transparent);
  transform: translateX(-50%);
}

/* 塔罗牌样式 */
.tarot-card-container {
  background: linear-gradient(135deg, rgba(139, 92, 246, 0.3), rgba(99, 102, 241, 0.3));
  backdrop-filter: blur(8px);
  border-radius: 16px;
  padding: 16px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  position: relative;
  border: 2px solid;
  transition: all 0.3s ease;
}

.tarot-card-container.major-arcana {
  background: linear-gradient(135deg, rgba(245, 158, 11, 0.3), rgba(251, 191, 36, 0.3));
  border-color: #f59e0b;
  box-shadow: 0 0 20px rgba(245, 158, 11, 0.3);
}

.tarot-card-container.minor-arcana {
  background: linear-gradient(135deg, rgba(139, 92, 246, 0.3), rgba(99, 102, 241, 0.3));
  border-color: #8b5cf6;
  box-shadow: 0 0 20px rgba(139, 92, 246, 0.3);
}

.card-image-container {
  position: relative;
  overflow: hidden;
  border-radius: 8px;
}

.tarot-card-image {
  transition: transform 0.3s ease;
}

.tarot-card-image:hover {
  transform: scale(1.05);
}

.element-badge {
  position: absolute;
  top: 8px;
  right: 8px;
  width: 32px;
  height: 32px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  font-weight: bold;
  backdrop-filter: blur(8px);
}

.element-badge.element-fire {
  background: rgba(239, 68, 68, 0.8);
  color: white;
}

.element-badge.element-water {
  background: rgba(59, 130, 246, 0.8);
  color: white;
}

.element-badge.element-air {
  background: rgba(245, 158, 11, 0.8);
  color: white;
}

.element-badge.element-earth {
  background: rgba(34, 197, 94, 0.8);
  color: white;
}

 .card-info {
   text-align: center;
 }

 /* 卡牌详细信息悬停提示框样式 */
 .card-tooltip {
   position: fixed;
   background: linear-gradient(135deg, rgba(139, 92, 246, 0.95), rgba(99, 102, 241, 0.95));
   backdrop-filter: blur(12px);
   border: 1px solid rgba(139, 92, 246, 0.3);
   border-radius: 12px;
   padding: 16px;
   max-width: 300px;
   z-index: 1000;
   box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
   pointer-events: none;
 }
 
 .tooltip-content h4 {
   color: white;
   font-size: 16px;
   font-weight: bold;
   margin-bottom: 8px;
 }
 
 .tooltip-content p {
   color: rgba(255, 255, 255, 0.9);
   font-size: 14px;
   line-height: 1.4;
   margin-bottom: 8px;
   word-wrap: break-word;
   overflow-wrap: break-word;
 }
 
 .tooltip-content div {
   color: rgba(255, 255, 255, 0.7);
   font-size: 12px;
 }
.interpretation-text {
  color: #e9d5ff; /* purple-100 */
  line-height: 1.75; /* leading-relaxed */
  font-size: 1rem; /* text-base */
  white-space: pre-wrap; /* 保持LLM输出的换行 */
  word-wrap: break-word;
  overflow-wrap: break-word;
}
</style> 